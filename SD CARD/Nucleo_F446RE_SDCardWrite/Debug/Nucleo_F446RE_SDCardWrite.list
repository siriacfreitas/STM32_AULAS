
Nucleo_F446RE_SDCardWrite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052d4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08005498  08005498  00006498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055f0  080055f0  00007024  2**0
                  CONTENTS
  4 .ARM          00000008  080055f0  080055f0  000065f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055f8  080055f8  00007024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055f8  080055f8  000065f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055fc  080055fc  000065fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08005600  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000024  08005624  00007024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08005624  000070e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3e4  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fce  00000000  00000000  00011438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  00013408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077a  00000000  00000000  00013e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002256a  00000000  00000000  0001457a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecd6  00000000  00000000  00036ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9028  00000000  00000000  000457ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e7e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002758  00000000  00000000  0010e828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00110f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005480 	.word	0x08005480

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08005480 	.word	0x08005480

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	f5ad 6d99 	sub.w	sp, sp, #1224	@ 0x4c8
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fa44 	bl	8000988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f87a 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f91c 	bl	8000740 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000508:	f000 f8e4 	bl	80006d4 <MX_SPI1_Init>
  MX_FATFS_Init();
 800050c:	f001 ff86 	bl	800241c <MX_FATFS_Init>

  FATFS meuFATFS;
  FIL meuArquivo;
  UINT testeByte;

  if (f_mount(&meuFATFS,USERPath, 1)== FR_OK){
 8000510:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000514:	2201      	movs	r2, #1
 8000516:	4931      	ldr	r1, [pc, #196]	@ (80005dc <main+0xe8>)
 8000518:	4618      	mov	r0, r3
 800051a:	f004 fa05 	bl	8004928 <f_mount>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d158      	bne.n	80005d6 <main+0xe2>

  	HAL_GPIO_TogglePin(GPIOB, led_Pin);
 8000524:	2120      	movs	r1, #32
 8000526:	482e      	ldr	r0, [pc, #184]	@ (80005e0 <main+0xec>)
 8000528:	f000 fd57 	bl	8000fda <HAL_GPIO_TogglePin>

  	f_open(&meuArquivo,"Arquivo.csv",FA_WRITE | FA_CREATE_ALWAYS);
 800052c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000530:	220a      	movs	r2, #10
 8000532:	492c      	ldr	r1, [pc, #176]	@ (80005e4 <main+0xf0>)
 8000534:	4618      	mov	r0, r3
 8000536:	f004 fa3d 	bl	80049b4 <f_open>
  	char meusdados[] = "Escrevendo linha 1,teste 1\r\nEscrevendo linha 2,teste 2\0";
 800053a:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800053e:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 8000542:	4a29      	ldr	r2, [pc, #164]	@ (80005e8 <main+0xf4>)
 8000544:	461c      	mov	r4, r3
 8000546:	4615      	mov	r5, r2
 8000548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000554:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000558:	e884 0003 	stmia.w	r4, {r0, r1}
  	f_write(&meuArquivo, meusdados, sizeof(meusdados), &testeByte);
 800055c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000560:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000564:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8000568:	2238      	movs	r2, #56	@ 0x38
 800056a:	f004 fbdd 	bl	8004d28 <f_write>
  	f_close(&meuArquivo);
 800056e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000572:	4618      	mov	r0, r3
 8000574:	f004 fdcb 	bl	800510e <f_close>

  	f_mkdir("PASTA");
 8000578:	481c      	ldr	r0, [pc, #112]	@ (80005ec <main+0xf8>)
 800057a:	f004 fdf2 	bl	8005162 <f_mkdir>
  	f_open(&meuArquivo,"/PASTA/File.txt",FA_WRITE | FA_CREATE_ALWAYS);
 800057e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000582:	220a      	movs	r2, #10
 8000584:	491a      	ldr	r1, [pc, #104]	@ (80005f0 <main+0xfc>)
 8000586:	4618      	mov	r0, r3
 8000588:	f004 fa14 	bl	80049b4 <f_open>
  	char dadosfile[] = "Criando um arquivo dentro de uma pasta\0";
 800058c:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8000590:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8000594:	4a17      	ldr	r2, [pc, #92]	@ (80005f4 <main+0x100>)
 8000596:	461c      	mov	r4, r3
 8000598:	4615      	mov	r5, r2
 800059a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005a6:	e884 0003 	stmia.w	r4, {r0, r1}
  	f_write(&meuArquivo, dadosfile, sizeof(dadosfile), &testeByte);
 80005aa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80005ae:	1d39      	adds	r1, r7, #4
 80005b0:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80005b4:	2228      	movs	r2, #40	@ 0x28
 80005b6:	f004 fbb7 	bl	8004d28 <f_write>
  	f_close(&meuArquivo);
 80005ba:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 fda5 	bl	800510e <f_close>


  	HAL_Delay(500);
 80005c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005c8:	f000 fa50 	bl	8000a6c <HAL_Delay>
  	HAL_GPIO_TogglePin(GPIOB, led_Pin);
 80005cc:	2120      	movs	r1, #32
 80005ce:	4804      	ldr	r0, [pc, #16]	@ (80005e0 <main+0xec>)
 80005d0:	f000 fd03 	bl	8000fda <HAL_GPIO_TogglePin>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	e7fd      	b.n	80005d6 <main+0xe2>
 80005da:	bf00      	nop
 80005dc:	200000a0 	.word	0x200000a0
 80005e0:	40020400 	.word	0x40020400
 80005e4:	08005498 	.word	0x08005498
 80005e8:	080054bc 	.word	0x080054bc
 80005ec:	080054a4 	.word	0x080054a4
 80005f0:	080054ac 	.word	0x080054ac
 80005f4:	080054f4 	.word	0x080054f4

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	@ 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	2234      	movs	r2, #52	@ 0x34
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f004 ff0d 	bl	8005426 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b2a      	ldr	r3, [pc, #168]	@ (80006cc <SystemClock_Config+0xd4>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	4a29      	ldr	r2, [pc, #164]	@ (80006cc <SystemClock_Config+0xd4>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	@ 0x40
 800062c:	4b27      	ldr	r3, [pc, #156]	@ (80006cc <SystemClock_Config+0xd4>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000638:	2300      	movs	r3, #0
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	4b24      	ldr	r3, [pc, #144]	@ (80006d0 <SystemClock_Config+0xd8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000644:	4a22      	ldr	r2, [pc, #136]	@ (80006d0 <SystemClock_Config+0xd8>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b20      	ldr	r3, [pc, #128]	@ (80006d0 <SystemClock_Config+0xd8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2310      	movs	r3, #16
 8000662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000668:	2300      	movs	r3, #0
 800066a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800066c:	2310      	movs	r3, #16
 800066e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000670:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000674:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000676:	2304      	movs	r3, #4
 8000678:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800067a:	2302      	movs	r3, #2
 800067c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800067e:	2302      	movs	r3, #2
 8000680:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	4618      	mov	r0, r3
 8000688:	f000 ffd8 	bl	800163c <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000692:	f000 f897 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2302      	movs	r3, #2
 800069c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	2102      	movs	r1, #2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fcac 	bl	8001010 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006be:	f000 f881 	bl	80007c4 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	@ 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d8:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <MX_SPI1_Init+0x64>)
 80006da:	4a18      	ldr	r2, [pc, #96]	@ (800073c <MX_SPI1_Init+0x68>)
 80006dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006de:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <MX_SPI1_Init+0x64>)
 80006e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e6:	4b14      	ldr	r3, [pc, #80]	@ (8000738 <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ec:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f2:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <MX_SPI1_Init+0x64>)
 8000700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000704:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <MX_SPI1_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800070c:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <MX_SPI1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <MX_SPI1_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	@ (8000738 <MX_SPI1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800071e:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <MX_SPI1_Init+0x64>)
 8000720:	220a      	movs	r2, #10
 8000722:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	@ (8000738 <MX_SPI1_Init+0x64>)
 8000726:	f001 fa27 	bl	8001b78 <HAL_SPI_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000730:	f000 f848 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000040 	.word	0x20000040
 800073c:	40013000 	.word	0x40013000

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <MX_GPIO_Init+0x7c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a17      	ldr	r2, [pc, #92]	@ (80007bc <MX_GPIO_Init+0x7c>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <MX_GPIO_Init+0x7c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_GPIO_Init+0x7c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a10      	ldr	r2, [pc, #64]	@ (80007bc <MX_GPIO_Init+0x7c>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_GPIO_Init+0x7c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2160      	movs	r1, #96	@ 0x60
 8000792:	480b      	ldr	r0, [pc, #44]	@ (80007c0 <MX_GPIO_Init+0x80>)
 8000794:	f000 fc08 	bl	8000fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = led_Pin|SPI1_CS_Pin;
 8000798:	2360      	movs	r3, #96	@ 0x60
 800079a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	2301      	movs	r3, #1
 800079e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	4619      	mov	r1, r3
 80007ae:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <MX_GPIO_Init+0x80>)
 80007b0:	f000 fa66 	bl	8000c80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020400 	.word	0x40020400

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <Error_Handler+0x8>

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007de:	4a0f      	ldr	r2, [pc, #60]	@ (800081c <HAL_MspInit+0x4c>)
 80007e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007e6:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <HAL_MspInit+0x4c>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fa:	4a08      	ldr	r2, [pc, #32]	@ (800081c <HAL_MspInit+0x4c>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000800:	6413      	str	r3, [r2, #64]	@ 0x40
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <HAL_MspInit+0x4c>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800080e:	2007      	movs	r0, #7
 8000810:	f000 fa02 	bl	8000c18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800

08000820 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a19      	ldr	r2, [pc, #100]	@ (80008a4 <HAL_SPI_MspInit+0x84>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d12b      	bne.n	800089a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <HAL_SPI_MspInit+0x88>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084a:	4a17      	ldr	r2, [pc, #92]	@ (80008a8 <HAL_SPI_MspInit+0x88>)
 800084c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000850:	6453      	str	r3, [r2, #68]	@ 0x44
 8000852:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <HAL_SPI_MspInit+0x88>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000856:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <HAL_SPI_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a10      	ldr	r2, [pc, #64]	@ (80008a8 <HAL_SPI_MspInit+0x88>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <HAL_SPI_MspInit+0x88>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800087a:	23e0      	movs	r3, #224	@ 0xe0
 800087c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800088a:	2305      	movs	r3, #5
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	@ (80008ac <HAL_SPI_MspInit+0x8c>)
 8000896:	f000 f9f3 	bl	8000c80 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800089a:	bf00      	nop
 800089c:	3728      	adds	r7, #40	@ 0x28
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40013000 	.word	0x40013000
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020000 	.word	0x40020000

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <NMI_Handler+0x4>

080008b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <HardFault_Handler+0x4>

080008c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <MemManage_Handler+0x4>

080008c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000906:	f000 f891 	bl	8000a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <SystemInit+0x20>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800091a:	4a05      	ldr	r2, [pc, #20]	@ (8000930 <SystemInit+0x20>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000934:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800096c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000938:	f7ff ffea 	bl	8000910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800093c:	480c      	ldr	r0, [pc, #48]	@ (8000970 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800093e:	490d      	ldr	r1, [pc, #52]	@ (8000974 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000940:	4a0d      	ldr	r2, [pc, #52]	@ (8000978 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0a      	ldr	r2, [pc, #40]	@ (800097c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000954:	4c0a      	ldr	r4, [pc, #40]	@ (8000980 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000962:	f004 fd69 	bl	8005438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000966:	f7ff fdc5 	bl	80004f4 <main>
  bx  lr    
 800096a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800096c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000978:	08005600 	.word	0x08005600
  ldr r2, =_sbss
 800097c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000980:	200000e4 	.word	0x200000e4

08000984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC_IRQHandler>
	...

08000988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800098c:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0d      	ldr	r2, [pc, #52]	@ (80009c8 <HAL_Init+0x40>)
 8000992:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000996:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000998:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <HAL_Init+0x40>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <HAL_Init+0x40>)
 800099e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a4:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <HAL_Init+0x40>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a07      	ldr	r2, [pc, #28]	@ (80009c8 <HAL_Init+0x40>)
 80009aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f000 f931 	bl	8000c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f000 f808 	bl	80009cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009bc:	f7ff ff08 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023c00 	.word	0x40023c00

080009cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <HAL_InitTick+0x54>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <HAL_InitTick+0x58>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f93b 	bl	8000c66 <HAL_SYSTICK_Config>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00e      	b.n	8000a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	d80a      	bhi.n	8000a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a00:	2200      	movs	r2, #0
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	f000 f911 	bl	8000c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a0c:	4a06      	ldr	r2, [pc, #24]	@ (8000a28 <HAL_InitTick+0x5c>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e000      	b.n	8000a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000000 	.word	0x20000000
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000004 	.word	0x20000004

08000a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <HAL_IncTick+0x20>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_IncTick+0x24>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a04      	ldr	r2, [pc, #16]	@ (8000a50 <HAL_IncTick+0x24>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20000098 	.word	0x20000098

08000a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;
 8000a58:	4b03      	ldr	r3, [pc, #12]	@ (8000a68 <HAL_GetTick+0x14>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000098 	.word	0x20000098

08000a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a74:	f7ff ffee 	bl	8000a54 <HAL_GetTick>
 8000a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a84:	d005      	beq.n	8000a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a86:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <HAL_Delay+0x44>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a92:	bf00      	nop
 8000a94:	f7ff ffde 	bl	8000a54 <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d8f7      	bhi.n	8000a94 <HAL_Delay+0x28>
  {
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008

08000ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000adc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	@ (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	60d3      	str	r3, [r2, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b00:	4b04      	ldr	r3, [pc, #16]	@ (8000b14 <__NVIC_GetPriorityGrouping+0x18>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	f003 0307 	and.w	r3, r3, #7
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	db0a      	blt.n	8000b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	490c      	ldr	r1, [pc, #48]	@ (8000b64 <__NVIC_SetPriority+0x4c>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	0112      	lsls	r2, r2, #4
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b40:	e00a      	b.n	8000b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4908      	ldr	r1, [pc, #32]	@ (8000b68 <__NVIC_SetPriority+0x50>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	3b04      	subs	r3, #4
 8000b50:	0112      	lsls	r2, r2, #4
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	761a      	strb	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000e100 	.word	0xe000e100
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	@ 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f1c3 0307 	rsb	r3, r3, #7
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	bf28      	it	cs
 8000b8a:	2304      	movcs	r3, #4
 8000b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3304      	adds	r3, #4
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d902      	bls.n	8000b9c <NVIC_EncodePriority+0x30>
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3b03      	subs	r3, #3
 8000b9a:	e000      	b.n	8000b9e <NVIC_EncodePriority+0x32>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43da      	mvns	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	401a      	ands	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43d9      	mvns	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	4313      	orrs	r3, r2
         );
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3724      	adds	r7, #36	@ 0x24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000be4:	d301      	bcc.n	8000bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00f      	b.n	8000c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <SysTick_Config+0x40>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	f7ff ff8e 	bl	8000b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bfc:	4b05      	ldr	r3, [pc, #20]	@ (8000c14 <SysTick_Config+0x40>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c02:	4b04      	ldr	r3, [pc, #16]	@ (8000c14 <SysTick_Config+0x40>)
 8000c04:	2207      	movs	r2, #7
 8000c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ff47 	bl	8000ab4 <__NVIC_SetPriorityGrouping>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c40:	f7ff ff5c 	bl	8000afc <__NVIC_GetPriorityGrouping>
 8000c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	6978      	ldr	r0, [r7, #20]
 8000c4c:	f7ff ff8e 	bl	8000b6c <NVIC_EncodePriority>
 8000c50:	4602      	mov	r2, r0
 8000c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff5d 	bl	8000b18 <__NVIC_SetPriority>
}
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ffb0 	bl	8000bd4 <SysTick_Config>
 8000c74:	4603      	mov	r3, r0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	@ 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	e165      	b.n	8000f68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	f040 8154 	bne.w	8000f62 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 0303 	and.w	r3, r3, #3
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d005      	beq.n	8000cd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d130      	bne.n	8000d34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	2203      	movs	r2, #3
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	68da      	ldr	r2, [r3, #12]
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d08:	2201      	movs	r2, #1
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	091b      	lsrs	r3, r3, #4
 8000d1e:	f003 0201 	and.w	r2, r3, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	2b03      	cmp	r3, #3
 8000d3e:	d017      	beq.n	8000d70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d123      	bne.n	8000dc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	08da      	lsrs	r2, r3, #3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3208      	adds	r2, #8
 8000d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	f003 0307 	and.w	r3, r3, #7
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	220f      	movs	r2, #15
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	691a      	ldr	r2, [r3, #16]
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	08da      	lsrs	r2, r3, #3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3208      	adds	r2, #8
 8000dbe:	69b9      	ldr	r1, [r7, #24]
 8000dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0203 	and.w	r2, r3, #3
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f000 80ae 	beq.w	8000f62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b5d      	ldr	r3, [pc, #372]	@ (8000f80 <HAL_GPIO_Init+0x300>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0e:	4a5c      	ldr	r2, [pc, #368]	@ (8000f80 <HAL_GPIO_Init+0x300>)
 8000e10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e16:	4b5a      	ldr	r3, [pc, #360]	@ (8000f80 <HAL_GPIO_Init+0x300>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e22:	4a58      	ldr	r2, [pc, #352]	@ (8000f84 <HAL_GPIO_Init+0x304>)
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	089b      	lsrs	r3, r3, #2
 8000e28:	3302      	adds	r3, #2
 8000e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	220f      	movs	r2, #15
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4f      	ldr	r2, [pc, #316]	@ (8000f88 <HAL_GPIO_Init+0x308>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d025      	beq.n	8000e9a <HAL_GPIO_Init+0x21a>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4e      	ldr	r2, [pc, #312]	@ (8000f8c <HAL_GPIO_Init+0x30c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d01f      	beq.n	8000e96 <HAL_GPIO_Init+0x216>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4d      	ldr	r2, [pc, #308]	@ (8000f90 <HAL_GPIO_Init+0x310>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d019      	beq.n	8000e92 <HAL_GPIO_Init+0x212>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4c      	ldr	r2, [pc, #304]	@ (8000f94 <HAL_GPIO_Init+0x314>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d013      	beq.n	8000e8e <HAL_GPIO_Init+0x20e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4b      	ldr	r2, [pc, #300]	@ (8000f98 <HAL_GPIO_Init+0x318>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d00d      	beq.n	8000e8a <HAL_GPIO_Init+0x20a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4a      	ldr	r2, [pc, #296]	@ (8000f9c <HAL_GPIO_Init+0x31c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d007      	beq.n	8000e86 <HAL_GPIO_Init+0x206>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a49      	ldr	r2, [pc, #292]	@ (8000fa0 <HAL_GPIO_Init+0x320>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d101      	bne.n	8000e82 <HAL_GPIO_Init+0x202>
 8000e7e:	2306      	movs	r3, #6
 8000e80:	e00c      	b.n	8000e9c <HAL_GPIO_Init+0x21c>
 8000e82:	2307      	movs	r3, #7
 8000e84:	e00a      	b.n	8000e9c <HAL_GPIO_Init+0x21c>
 8000e86:	2305      	movs	r3, #5
 8000e88:	e008      	b.n	8000e9c <HAL_GPIO_Init+0x21c>
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x21c>
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e004      	b.n	8000e9c <HAL_GPIO_Init+0x21c>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e002      	b.n	8000e9c <HAL_GPIO_Init+0x21c>
 8000e96:	2301      	movs	r3, #1
 8000e98:	e000      	b.n	8000e9c <HAL_GPIO_Init+0x21c>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	69fa      	ldr	r2, [r7, #28]
 8000e9e:	f002 0203 	and.w	r2, r2, #3
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	4093      	lsls	r3, r2
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eac:	4935      	ldr	r1, [pc, #212]	@ (8000f84 <HAL_GPIO_Init+0x304>)
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eba:	4b3a      	ldr	r3, [pc, #232]	@ (8000fa4 <HAL_GPIO_Init+0x324>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ede:	4a31      	ldr	r2, [pc, #196]	@ (8000fa4 <HAL_GPIO_Init+0x324>)
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee4:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa4 <HAL_GPIO_Init+0x324>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f08:	4a26      	ldr	r2, [pc, #152]	@ (8000fa4 <HAL_GPIO_Init+0x324>)
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f0e:	4b25      	ldr	r3, [pc, #148]	@ (8000fa4 <HAL_GPIO_Init+0x324>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f32:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa4 <HAL_GPIO_Init+0x324>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <HAL_GPIO_Init+0x324>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f5c:	4a11      	ldr	r2, [pc, #68]	@ (8000fa4 <HAL_GPIO_Init+0x324>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3301      	adds	r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	2b0f      	cmp	r3, #15
 8000f6c:	f67f ae96 	bls.w	8000c9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3724      	adds	r7, #36	@ 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40013800 	.word	0x40013800
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	40020800 	.word	0x40020800
 8000f94:	40020c00 	.word	0x40020c00
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40021400 	.word	0x40021400
 8000fa0:	40021800 	.word	0x40021800
 8000fa4:	40013c00 	.word	0x40013c00

08000fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb8:	787b      	ldrb	r3, [r7, #1]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fbe:	887a      	ldrh	r2, [r7, #2]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fc4:	e003      	b.n	8000fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fc6:	887b      	ldrh	r3, [r7, #2]
 8000fc8:	041a      	lsls	r2, r3, #16
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	619a      	str	r2, [r3, #24]
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b085      	sub	sp, #20
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fec:	887a      	ldrh	r2, [r7, #2]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	041a      	lsls	r2, r3, #16
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43d9      	mvns	r1, r3
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	400b      	ands	r3, r1
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	619a      	str	r2, [r3, #24]
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d101      	bne.n	8001024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e0cc      	b.n	80011be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001024:	4b68      	ldr	r3, [pc, #416]	@ (80011c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 030f 	and.w	r3, r3, #15
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	429a      	cmp	r2, r3
 8001030:	d90c      	bls.n	800104c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001032:	4b65      	ldr	r3, [pc, #404]	@ (80011c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800103a:	4b63      	ldr	r3, [pc, #396]	@ (80011c8 <HAL_RCC_ClockConfig+0x1b8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d001      	beq.n	800104c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e0b8      	b.n	80011be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d020      	beq.n	800109a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001064:	4b59      	ldr	r3, [pc, #356]	@ (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	4a58      	ldr	r2, [pc, #352]	@ (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 800106a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800106e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800107c:	4b53      	ldr	r3, [pc, #332]	@ (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	4a52      	ldr	r2, [pc, #328]	@ (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001082:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001088:	4b50      	ldr	r3, [pc, #320]	@ (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	494d      	ldr	r1, [pc, #308]	@ (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001096:	4313      	orrs	r3, r2
 8001098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d044      	beq.n	8001130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d107      	bne.n	80010be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ae:	4b47      	ldr	r3, [pc, #284]	@ (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d119      	bne.n	80010ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e07f      	b.n	80011be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d003      	beq.n	80010ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d107      	bne.n	80010de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ce:	4b3f      	ldr	r3, [pc, #252]	@ (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d109      	bne.n	80010ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e06f      	b.n	80011be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010de:	4b3b      	ldr	r3, [pc, #236]	@ (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e067      	b.n	80011be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ee:	4b37      	ldr	r3, [pc, #220]	@ (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f023 0203 	bic.w	r2, r3, #3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	4934      	ldr	r1, [pc, #208]	@ (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 80010fc:	4313      	orrs	r3, r2
 80010fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001100:	f7ff fca8 	bl	8000a54 <HAL_GetTick>
 8001104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001106:	e00a      	b.n	800111e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001108:	f7ff fca4 	bl	8000a54 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001116:	4293      	cmp	r3, r2
 8001118:	d901      	bls.n	800111e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e04f      	b.n	80011be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800111e:	4b2b      	ldr	r3, [pc, #172]	@ (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 020c 	and.w	r2, r3, #12
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	429a      	cmp	r2, r3
 800112e:	d1eb      	bne.n	8001108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001130:	4b25      	ldr	r3, [pc, #148]	@ (80011c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 030f 	and.w	r3, r3, #15
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	d20c      	bcs.n	8001158 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800113e:	4b22      	ldr	r3, [pc, #136]	@ (80011c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001146:	4b20      	ldr	r3, [pc, #128]	@ (80011c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d001      	beq.n	8001158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e032      	b.n	80011be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	d008      	beq.n	8001176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001164:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	4916      	ldr	r1, [pc, #88]	@ (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001172:	4313      	orrs	r3, r2
 8001174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001182:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	490e      	ldr	r1, [pc, #56]	@ (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001192:	4313      	orrs	r3, r2
 8001194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001196:	f000 f821 	bl	80011dc <HAL_RCC_GetSysClockFreq>
 800119a:	4602      	mov	r2, r0
 800119c:	4b0b      	ldr	r3, [pc, #44]	@ (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	490a      	ldr	r1, [pc, #40]	@ (80011d0 <HAL_RCC_ClockConfig+0x1c0>)
 80011a8:	5ccb      	ldrb	r3, [r1, r3]
 80011aa:	fa22 f303 	lsr.w	r3, r2, r3
 80011ae:	4a09      	ldr	r2, [pc, #36]	@ (80011d4 <HAL_RCC_ClockConfig+0x1c4>)
 80011b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <HAL_RCC_ClockConfig+0x1c8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fc08 	bl	80009cc <HAL_InitTick>

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023c00 	.word	0x40023c00
 80011cc:	40023800 	.word	0x40023800
 80011d0:	08005560 	.word	0x08005560
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011e0:	b0ae      	sub	sp, #184	@ 0xb8
 80011e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001202:	4bcb      	ldr	r3, [pc, #812]	@ (8001530 <HAL_RCC_GetSysClockFreq+0x354>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b0c      	cmp	r3, #12
 800120c:	f200 8206 	bhi.w	800161c <HAL_RCC_GetSysClockFreq+0x440>
 8001210:	a201      	add	r2, pc, #4	@ (adr r2, 8001218 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001216:	bf00      	nop
 8001218:	0800124d 	.word	0x0800124d
 800121c:	0800161d 	.word	0x0800161d
 8001220:	0800161d 	.word	0x0800161d
 8001224:	0800161d 	.word	0x0800161d
 8001228:	08001255 	.word	0x08001255
 800122c:	0800161d 	.word	0x0800161d
 8001230:	0800161d 	.word	0x0800161d
 8001234:	0800161d 	.word	0x0800161d
 8001238:	0800125d 	.word	0x0800125d
 800123c:	0800161d 	.word	0x0800161d
 8001240:	0800161d 	.word	0x0800161d
 8001244:	0800161d 	.word	0x0800161d
 8001248:	0800144d 	.word	0x0800144d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800124c:	4bb9      	ldr	r3, [pc, #740]	@ (8001534 <HAL_RCC_GetSysClockFreq+0x358>)
 800124e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001252:	e1e7      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001254:	4bb8      	ldr	r3, [pc, #736]	@ (8001538 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001256:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800125a:	e1e3      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800125c:	4bb4      	ldr	r3, [pc, #720]	@ (8001530 <HAL_RCC_GetSysClockFreq+0x354>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001264:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001268:	4bb1      	ldr	r3, [pc, #708]	@ (8001530 <HAL_RCC_GetSysClockFreq+0x354>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d071      	beq.n	8001358 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001274:	4bae      	ldr	r3, [pc, #696]	@ (8001530 <HAL_RCC_GetSysClockFreq+0x354>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	099b      	lsrs	r3, r3, #6
 800127a:	2200      	movs	r2, #0
 800127c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001280:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001284:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800128c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001296:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800129a:	4622      	mov	r2, r4
 800129c:	462b      	mov	r3, r5
 800129e:	f04f 0000 	mov.w	r0, #0
 80012a2:	f04f 0100 	mov.w	r1, #0
 80012a6:	0159      	lsls	r1, r3, #5
 80012a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012ac:	0150      	lsls	r0, r2, #5
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4621      	mov	r1, r4
 80012b4:	1a51      	subs	r1, r2, r1
 80012b6:	6439      	str	r1, [r7, #64]	@ 0x40
 80012b8:	4629      	mov	r1, r5
 80012ba:	eb63 0301 	sbc.w	r3, r3, r1
 80012be:	647b      	str	r3, [r7, #68]	@ 0x44
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80012cc:	4649      	mov	r1, r9
 80012ce:	018b      	lsls	r3, r1, #6
 80012d0:	4641      	mov	r1, r8
 80012d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80012d6:	4641      	mov	r1, r8
 80012d8:	018a      	lsls	r2, r1, #6
 80012da:	4641      	mov	r1, r8
 80012dc:	1a51      	subs	r1, r2, r1
 80012de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80012e0:	4649      	mov	r1, r9
 80012e2:	eb63 0301 	sbc.w	r3, r3, r1
 80012e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80012f4:	4649      	mov	r1, r9
 80012f6:	00cb      	lsls	r3, r1, #3
 80012f8:	4641      	mov	r1, r8
 80012fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012fe:	4641      	mov	r1, r8
 8001300:	00ca      	lsls	r2, r1, #3
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	4603      	mov	r3, r0
 8001308:	4622      	mov	r2, r4
 800130a:	189b      	adds	r3, r3, r2
 800130c:	633b      	str	r3, [r7, #48]	@ 0x30
 800130e:	462b      	mov	r3, r5
 8001310:	460a      	mov	r2, r1
 8001312:	eb42 0303 	adc.w	r3, r2, r3
 8001316:	637b      	str	r3, [r7, #52]	@ 0x34
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001324:	4629      	mov	r1, r5
 8001326:	024b      	lsls	r3, r1, #9
 8001328:	4621      	mov	r1, r4
 800132a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800132e:	4621      	mov	r1, r4
 8001330:	024a      	lsls	r2, r1, #9
 8001332:	4610      	mov	r0, r2
 8001334:	4619      	mov	r1, r3
 8001336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800133a:	2200      	movs	r2, #0
 800133c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001340:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001344:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001348:	f7fe ff5c 	bl	8000204 <__aeabi_uldivmod>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4613      	mov	r3, r2
 8001352:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001356:	e067      	b.n	8001428 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001358:	4b75      	ldr	r3, [pc, #468]	@ (8001530 <HAL_RCC_GetSysClockFreq+0x354>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	099b      	lsrs	r3, r3, #6
 800135e:	2200      	movs	r2, #0
 8001360:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001364:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001368:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800136c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001370:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001372:	2300      	movs	r3, #0
 8001374:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001376:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800137a:	4622      	mov	r2, r4
 800137c:	462b      	mov	r3, r5
 800137e:	f04f 0000 	mov.w	r0, #0
 8001382:	f04f 0100 	mov.w	r1, #0
 8001386:	0159      	lsls	r1, r3, #5
 8001388:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800138c:	0150      	lsls	r0, r2, #5
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4621      	mov	r1, r4
 8001394:	1a51      	subs	r1, r2, r1
 8001396:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001398:	4629      	mov	r1, r5
 800139a:	eb63 0301 	sbc.w	r3, r3, r1
 800139e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80013ac:	4649      	mov	r1, r9
 80013ae:	018b      	lsls	r3, r1, #6
 80013b0:	4641      	mov	r1, r8
 80013b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013b6:	4641      	mov	r1, r8
 80013b8:	018a      	lsls	r2, r1, #6
 80013ba:	4641      	mov	r1, r8
 80013bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80013c0:	4649      	mov	r1, r9
 80013c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80013d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80013d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80013da:	4692      	mov	sl, r2
 80013dc:	469b      	mov	fp, r3
 80013de:	4623      	mov	r3, r4
 80013e0:	eb1a 0303 	adds.w	r3, sl, r3
 80013e4:	623b      	str	r3, [r7, #32]
 80013e6:	462b      	mov	r3, r5
 80013e8:	eb4b 0303 	adc.w	r3, fp, r3
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80013fa:	4629      	mov	r1, r5
 80013fc:	028b      	lsls	r3, r1, #10
 80013fe:	4621      	mov	r1, r4
 8001400:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001404:	4621      	mov	r1, r4
 8001406:	028a      	lsls	r2, r1, #10
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001410:	2200      	movs	r2, #0
 8001412:	673b      	str	r3, [r7, #112]	@ 0x70
 8001414:	677a      	str	r2, [r7, #116]	@ 0x74
 8001416:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800141a:	f7fe fef3 	bl	8000204 <__aeabi_uldivmod>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4613      	mov	r3, r2
 8001424:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001428:	4b41      	ldr	r3, [pc, #260]	@ (8001530 <HAL_RCC_GetSysClockFreq+0x354>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	0c1b      	lsrs	r3, r3, #16
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	3301      	adds	r3, #1
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800143a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800143e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001442:	fbb2 f3f3 	udiv	r3, r2, r3
 8001446:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800144a:	e0eb      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800144c:	4b38      	ldr	r3, [pc, #224]	@ (8001530 <HAL_RCC_GetSysClockFreq+0x354>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001454:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001458:	4b35      	ldr	r3, [pc, #212]	@ (8001530 <HAL_RCC_GetSysClockFreq+0x354>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d06b      	beq.n	800153c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001464:	4b32      	ldr	r3, [pc, #200]	@ (8001530 <HAL_RCC_GetSysClockFreq+0x354>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	099b      	lsrs	r3, r3, #6
 800146a:	2200      	movs	r2, #0
 800146c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800146e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001470:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001476:	663b      	str	r3, [r7, #96]	@ 0x60
 8001478:	2300      	movs	r3, #0
 800147a:	667b      	str	r3, [r7, #100]	@ 0x64
 800147c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001480:	4622      	mov	r2, r4
 8001482:	462b      	mov	r3, r5
 8001484:	f04f 0000 	mov.w	r0, #0
 8001488:	f04f 0100 	mov.w	r1, #0
 800148c:	0159      	lsls	r1, r3, #5
 800148e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001492:	0150      	lsls	r0, r2, #5
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4621      	mov	r1, r4
 800149a:	1a51      	subs	r1, r2, r1
 800149c:	61b9      	str	r1, [r7, #24]
 800149e:	4629      	mov	r1, r5
 80014a0:	eb63 0301 	sbc.w	r3, r3, r1
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	f04f 0300 	mov.w	r3, #0
 80014ae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80014b2:	4659      	mov	r1, fp
 80014b4:	018b      	lsls	r3, r1, #6
 80014b6:	4651      	mov	r1, sl
 80014b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014bc:	4651      	mov	r1, sl
 80014be:	018a      	lsls	r2, r1, #6
 80014c0:	4651      	mov	r1, sl
 80014c2:	ebb2 0801 	subs.w	r8, r2, r1
 80014c6:	4659      	mov	r1, fp
 80014c8:	eb63 0901 	sbc.w	r9, r3, r1
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014e0:	4690      	mov	r8, r2
 80014e2:	4699      	mov	r9, r3
 80014e4:	4623      	mov	r3, r4
 80014e6:	eb18 0303 	adds.w	r3, r8, r3
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	462b      	mov	r3, r5
 80014ee:	eb49 0303 	adc.w	r3, r9, r3
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001500:	4629      	mov	r1, r5
 8001502:	024b      	lsls	r3, r1, #9
 8001504:	4621      	mov	r1, r4
 8001506:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800150a:	4621      	mov	r1, r4
 800150c:	024a      	lsls	r2, r1, #9
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001516:	2200      	movs	r2, #0
 8001518:	65bb      	str	r3, [r7, #88]	@ 0x58
 800151a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800151c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001520:	f7fe fe70 	bl	8000204 <__aeabi_uldivmod>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4613      	mov	r3, r2
 800152a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800152e:	e065      	b.n	80015fc <HAL_RCC_GetSysClockFreq+0x420>
 8001530:	40023800 	.word	0x40023800
 8001534:	00f42400 	.word	0x00f42400
 8001538:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800153c:	4b3d      	ldr	r3, [pc, #244]	@ (8001634 <HAL_RCC_GetSysClockFreq+0x458>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	099b      	lsrs	r3, r3, #6
 8001542:	2200      	movs	r2, #0
 8001544:	4618      	mov	r0, r3
 8001546:	4611      	mov	r1, r2
 8001548:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800154c:	653b      	str	r3, [r7, #80]	@ 0x50
 800154e:	2300      	movs	r3, #0
 8001550:	657b      	str	r3, [r7, #84]	@ 0x54
 8001552:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001556:	4642      	mov	r2, r8
 8001558:	464b      	mov	r3, r9
 800155a:	f04f 0000 	mov.w	r0, #0
 800155e:	f04f 0100 	mov.w	r1, #0
 8001562:	0159      	lsls	r1, r3, #5
 8001564:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001568:	0150      	lsls	r0, r2, #5
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4641      	mov	r1, r8
 8001570:	1a51      	subs	r1, r2, r1
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	4649      	mov	r1, r9
 8001576:	eb63 0301 	sbc.w	r3, r3, r1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001588:	4659      	mov	r1, fp
 800158a:	018b      	lsls	r3, r1, #6
 800158c:	4651      	mov	r1, sl
 800158e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001592:	4651      	mov	r1, sl
 8001594:	018a      	lsls	r2, r1, #6
 8001596:	4651      	mov	r1, sl
 8001598:	1a54      	subs	r4, r2, r1
 800159a:	4659      	mov	r1, fp
 800159c:	eb63 0501 	sbc.w	r5, r3, r1
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	00eb      	lsls	r3, r5, #3
 80015aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015ae:	00e2      	lsls	r2, r4, #3
 80015b0:	4614      	mov	r4, r2
 80015b2:	461d      	mov	r5, r3
 80015b4:	4643      	mov	r3, r8
 80015b6:	18e3      	adds	r3, r4, r3
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	464b      	mov	r3, r9
 80015bc:	eb45 0303 	adc.w	r3, r5, r3
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015ce:	4629      	mov	r1, r5
 80015d0:	028b      	lsls	r3, r1, #10
 80015d2:	4621      	mov	r1, r4
 80015d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015d8:	4621      	mov	r1, r4
 80015da:	028a      	lsls	r2, r1, #10
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015e4:	2200      	movs	r2, #0
 80015e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80015e8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80015ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80015ee:	f7fe fe09 	bl	8000204 <__aeabi_uldivmod>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4613      	mov	r3, r2
 80015f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80015fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001634 <HAL_RCC_GetSysClockFreq+0x458>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	0f1b      	lsrs	r3, r3, #28
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800160a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800160e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800161a:	e003      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x45c>)
 800161e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001622:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001624:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001628:	4618      	mov	r0, r3
 800162a:	37b8      	adds	r7, #184	@ 0xb8
 800162c:	46bd      	mov	sp, r7
 800162e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	00f42400 	.word	0x00f42400

0800163c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e28d      	b.n	8001b6a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8083 	beq.w	8001762 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800165c:	4b94      	ldr	r3, [pc, #592]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b04      	cmp	r3, #4
 8001666:	d019      	beq.n	800169c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001668:	4b91      	ldr	r3, [pc, #580]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001670:	2b08      	cmp	r3, #8
 8001672:	d106      	bne.n	8001682 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001674:	4b8e      	ldr	r3, [pc, #568]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800167c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001680:	d00c      	beq.n	800169c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001682:	4b8b      	ldr	r3, [pc, #556]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800168a:	2b0c      	cmp	r3, #12
 800168c:	d112      	bne.n	80016b4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800168e:	4b88      	ldr	r3, [pc, #544]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001696:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800169a:	d10b      	bne.n	80016b4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169c:	4b84      	ldr	r3, [pc, #528]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d05b      	beq.n	8001760 <HAL_RCC_OscConfig+0x124>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d157      	bne.n	8001760 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e25a      	b.n	8001b6a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016bc:	d106      	bne.n	80016cc <HAL_RCC_OscConfig+0x90>
 80016be:	4b7c      	ldr	r3, [pc, #496]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a7b      	ldr	r2, [pc, #492]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 80016c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e01d      	b.n	8001708 <HAL_RCC_OscConfig+0xcc>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016d4:	d10c      	bne.n	80016f0 <HAL_RCC_OscConfig+0xb4>
 80016d6:	4b76      	ldr	r3, [pc, #472]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a75      	ldr	r2, [pc, #468]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 80016dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	4b73      	ldr	r3, [pc, #460]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a72      	ldr	r2, [pc, #456]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 80016e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	e00b      	b.n	8001708 <HAL_RCC_OscConfig+0xcc>
 80016f0:	4b6f      	ldr	r3, [pc, #444]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a6e      	ldr	r2, [pc, #440]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 80016f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	4b6c      	ldr	r3, [pc, #432]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a6b      	ldr	r2, [pc, #428]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 8001702:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d013      	beq.n	8001738 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001710:	f7ff f9a0 	bl	8000a54 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001718:	f7ff f99c 	bl	8000a54 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b64      	cmp	r3, #100	@ 0x64
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e21f      	b.n	8001b6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172a:	4b61      	ldr	r3, [pc, #388]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0xdc>
 8001736:	e014      	b.n	8001762 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001738:	f7ff f98c 	bl	8000a54 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001740:	f7ff f988 	bl	8000a54 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b64      	cmp	r3, #100	@ 0x64
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e20b      	b.n	8001b6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001752:	4b57      	ldr	r3, [pc, #348]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x104>
 800175e:	e000      	b.n	8001762 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d06f      	beq.n	800184e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800176e:	4b50      	ldr	r3, [pc, #320]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b00      	cmp	r3, #0
 8001778:	d017      	beq.n	80017aa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800177a:	4b4d      	ldr	r3, [pc, #308]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001782:	2b08      	cmp	r3, #8
 8001784:	d105      	bne.n	8001792 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001786:	4b4a      	ldr	r3, [pc, #296]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00b      	beq.n	80017aa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001792:	4b47      	ldr	r3, [pc, #284]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800179a:	2b0c      	cmp	r3, #12
 800179c:	d11c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800179e:	4b44      	ldr	r3, [pc, #272]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d116      	bne.n	80017d8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017aa:	4b41      	ldr	r3, [pc, #260]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <HAL_RCC_OscConfig+0x186>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d001      	beq.n	80017c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e1d3      	b.n	8001b6a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c2:	4b3b      	ldr	r3, [pc, #236]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4937      	ldr	r1, [pc, #220]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d6:	e03a      	b.n	800184e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017e0:	4b34      	ldr	r3, [pc, #208]	@ (80018b4 <HAL_RCC_OscConfig+0x278>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e6:	f7ff f935 	bl	8000a54 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ee:	f7ff f931 	bl	8000a54 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e1b4      	b.n	8001b6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001800:	4b2b      	ldr	r3, [pc, #172]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180c:	4b28      	ldr	r3, [pc, #160]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	4925      	ldr	r1, [pc, #148]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 800181c:	4313      	orrs	r3, r2
 800181e:	600b      	str	r3, [r1, #0]
 8001820:	e015      	b.n	800184e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001822:	4b24      	ldr	r3, [pc, #144]	@ (80018b4 <HAL_RCC_OscConfig+0x278>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff f914 	bl	8000a54 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001830:	f7ff f910 	bl	8000a54 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e193      	b.n	8001b6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001842:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d036      	beq.n	80018c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d016      	beq.n	8001890 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001862:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <HAL_RCC_OscConfig+0x27c>)
 8001864:	2201      	movs	r2, #1
 8001866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001868:	f7ff f8f4 	bl	8000a54 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001870:	f7ff f8f0 	bl	8000a54 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e173      	b.n	8001b6a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001882:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <HAL_RCC_OscConfig+0x274>)
 8001884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x234>
 800188e:	e01b      	b.n	80018c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001890:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <HAL_RCC_OscConfig+0x27c>)
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001896:	f7ff f8dd 	bl	8000a54 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189c:	e00e      	b.n	80018bc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800189e:	f7ff f8d9 	bl	8000a54 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d907      	bls.n	80018bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e15c      	b.n	8001b6a <HAL_RCC_OscConfig+0x52e>
 80018b0:	40023800 	.word	0x40023800
 80018b4:	42470000 	.word	0x42470000
 80018b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018bc:	4b8a      	ldr	r3, [pc, #552]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 80018be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1ea      	bne.n	800189e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 8097 	beq.w	8001a04 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018da:	4b83      	ldr	r3, [pc, #524]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10f      	bne.n	8001906 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	4b7f      	ldr	r3, [pc, #508]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	4a7e      	ldr	r2, [pc, #504]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018f6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001902:	2301      	movs	r3, #1
 8001904:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001906:	4b79      	ldr	r3, [pc, #484]	@ (8001aec <HAL_RCC_OscConfig+0x4b0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800190e:	2b00      	cmp	r3, #0
 8001910:	d118      	bne.n	8001944 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001912:	4b76      	ldr	r3, [pc, #472]	@ (8001aec <HAL_RCC_OscConfig+0x4b0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a75      	ldr	r2, [pc, #468]	@ (8001aec <HAL_RCC_OscConfig+0x4b0>)
 8001918:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800191c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191e:	f7ff f899 	bl	8000a54 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001926:	f7ff f895 	bl	8000a54 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e118      	b.n	8001b6a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001938:	4b6c      	ldr	r3, [pc, #432]	@ (8001aec <HAL_RCC_OscConfig+0x4b0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d106      	bne.n	800195a <HAL_RCC_OscConfig+0x31e>
 800194c:	4b66      	ldr	r3, [pc, #408]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 800194e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001950:	4a65      	ldr	r2, [pc, #404]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6713      	str	r3, [r2, #112]	@ 0x70
 8001958:	e01c      	b.n	8001994 <HAL_RCC_OscConfig+0x358>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b05      	cmp	r3, #5
 8001960:	d10c      	bne.n	800197c <HAL_RCC_OscConfig+0x340>
 8001962:	4b61      	ldr	r3, [pc, #388]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 8001964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001966:	4a60      	ldr	r2, [pc, #384]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 8001968:	f043 0304 	orr.w	r3, r3, #4
 800196c:	6713      	str	r3, [r2, #112]	@ 0x70
 800196e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 8001970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001972:	4a5d      	ldr	r2, [pc, #372]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6713      	str	r3, [r2, #112]	@ 0x70
 800197a:	e00b      	b.n	8001994 <HAL_RCC_OscConfig+0x358>
 800197c:	4b5a      	ldr	r3, [pc, #360]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001980:	4a59      	ldr	r2, [pc, #356]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 8001982:	f023 0301 	bic.w	r3, r3, #1
 8001986:	6713      	str	r3, [r2, #112]	@ 0x70
 8001988:	4b57      	ldr	r3, [pc, #348]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 800198a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198c:	4a56      	ldr	r2, [pc, #344]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 800198e:	f023 0304 	bic.w	r3, r3, #4
 8001992:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d015      	beq.n	80019c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199c:	f7ff f85a 	bl	8000a54 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a2:	e00a      	b.n	80019ba <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a4:	f7ff f856 	bl	8000a54 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e0d7      	b.n	8001b6a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ba:	4b4b      	ldr	r3, [pc, #300]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 80019bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0ee      	beq.n	80019a4 <HAL_RCC_OscConfig+0x368>
 80019c6:	e014      	b.n	80019f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c8:	f7ff f844 	bl	8000a54 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ce:	e00a      	b.n	80019e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d0:	f7ff f840 	bl	8000a54 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e0c1      	b.n	8001b6a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e6:	4b40      	ldr	r3, [pc, #256]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 80019e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1ee      	bne.n	80019d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019f2:	7dfb      	ldrb	r3, [r7, #23]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d105      	bne.n	8001a04 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fc:	4a3a      	ldr	r2, [pc, #232]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 80019fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 80ad 	beq.w	8001b68 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a0e:	4b36      	ldr	r3, [pc, #216]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d060      	beq.n	8001adc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d145      	bne.n	8001aae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	4b33      	ldr	r3, [pc, #204]	@ (8001af0 <HAL_RCC_OscConfig+0x4b4>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff f814 	bl	8000a54 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a30:	f7ff f810 	bl	8000a54 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e093      	b.n	8001b6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a42:	4b29      	ldr	r3, [pc, #164]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69da      	ldr	r2, [r3, #28]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5c:	019b      	lsls	r3, r3, #6
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a64:	085b      	lsrs	r3, r3, #1
 8001a66:	3b01      	subs	r3, #1
 8001a68:	041b      	lsls	r3, r3, #16
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a70:	061b      	lsls	r3, r3, #24
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a78:	071b      	lsls	r3, r3, #28
 8001a7a:	491b      	ldr	r1, [pc, #108]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a80:	4b1b      	ldr	r3, [pc, #108]	@ (8001af0 <HAL_RCC_OscConfig+0x4b4>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7fe ffe5 	bl	8000a54 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7fe ffe1 	bl	8000a54 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e064      	b.n	8001b6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa0:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x452>
 8001aac:	e05c      	b.n	8001b68 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aae:	4b10      	ldr	r3, [pc, #64]	@ (8001af0 <HAL_RCC_OscConfig+0x4b4>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7fe ffce 	bl	8000a54 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abc:	f7fe ffca 	bl	8000a54 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e04d      	b.n	8001b6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ace:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <HAL_RCC_OscConfig+0x4ac>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x480>
 8001ada:	e045      	b.n	8001b68 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d107      	bne.n	8001af4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e040      	b.n	8001b6a <HAL_RCC_OscConfig+0x52e>
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40007000 	.word	0x40007000
 8001af0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001af4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b74 <HAL_RCC_OscConfig+0x538>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d030      	beq.n	8001b64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d129      	bne.n	8001b64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d122      	bne.n	8001b64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b24:	4013      	ands	r3, r2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d119      	bne.n	8001b64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3a:	085b      	lsrs	r3, r3, #1
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d10f      	bne.n	8001b64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d001      	beq.n	8001b68 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800

08001b78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e07b      	b.n	8001c82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d108      	bne.n	8001ba4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001b9a:	d009      	beq.n	8001bb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
 8001ba2:	e005      	b.n	8001bb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d106      	bne.n	8001bd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7fe fe28 	bl	8000820 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001be6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c34:	ea42 0103 	orr.w	r1, r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c3c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	0c1b      	lsrs	r3, r3, #16
 8001c4e:	f003 0104 	and.w	r1, r3, #4
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c56:	f003 0210 	and.w	r2, r3, #16
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	69da      	ldr	r2, [r3, #28]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b088      	sub	sp, #32
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	4613      	mov	r3, r2
 8001c98:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c9a:	f7fe fedb 	bl	8000a54 <HAL_GetTick>
 8001c9e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001ca0:	88fb      	ldrh	r3, [r7, #6]
 8001ca2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d001      	beq.n	8001cb4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e12a      	b.n	8001f0a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <HAL_SPI_Transmit+0x36>
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e122      	b.n	8001f0a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_SPI_Transmit+0x48>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e11b      	b.n	8001f0a <HAL_SPI_Transmit+0x280>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2203      	movs	r2, #3
 8001cde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	88fa      	ldrh	r2, [r7, #6]
 8001cf2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	88fa      	ldrh	r2, [r7, #6]
 8001cf8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d20:	d10f      	bne.n	8001d42 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d4c:	2b40      	cmp	r3, #64	@ 0x40
 8001d4e:	d007      	beq.n	8001d60 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d68:	d152      	bne.n	8001e10 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d002      	beq.n	8001d78 <HAL_SPI_Transmit+0xee>
 8001d72:	8b7b      	ldrh	r3, [r7, #26]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d145      	bne.n	8001e04 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7c:	881a      	ldrh	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d88:	1c9a      	adds	r2, r3, #2
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d9c:	e032      	b.n	8001e04 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d112      	bne.n	8001dd2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db0:	881a      	ldrh	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbc:	1c9a      	adds	r2, r3, #2
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001dd0:	e018      	b.n	8001e04 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dd2:	f7fe fe3f 	bl	8000a54 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d803      	bhi.n	8001dea <HAL_SPI_Transmit+0x160>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de8:	d102      	bne.n	8001df0 <HAL_SPI_Transmit+0x166>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e082      	b.n	8001f0a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1c7      	bne.n	8001d9e <HAL_SPI_Transmit+0x114>
 8001e0e:	e053      	b.n	8001eb8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <HAL_SPI_Transmit+0x194>
 8001e18:	8b7b      	ldrh	r3, [r7, #26]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d147      	bne.n	8001eae <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	330c      	adds	r3, #12
 8001e28:	7812      	ldrb	r2, [r2, #0]
 8001e2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e44:	e033      	b.n	8001eae <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d113      	bne.n	8001e7c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	7812      	ldrb	r2, [r2, #0]
 8001e60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	3b01      	subs	r3, #1
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001e7a:	e018      	b.n	8001eae <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e7c:	f7fe fdea 	bl	8000a54 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d803      	bhi.n	8001e94 <HAL_SPI_Transmit+0x20a>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e92:	d102      	bne.n	8001e9a <HAL_SPI_Transmit+0x210>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d109      	bne.n	8001eae <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e02d      	b.n	8001f0a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1c6      	bne.n	8001e46 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	6839      	ldr	r1, [r7, #0]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 fa59 	bl	8002374 <SPI_EndRxTxTransaction>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10a      	bne.n	8001eec <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001f08:	2300      	movs	r3, #0
  }
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b08a      	sub	sp, #40	@ 0x28
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f20:	2301      	movs	r3, #1
 8001f22:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f24:	f7fe fd96 	bl	8000a54 <HAL_GetTick>
 8001f28:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f30:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001f38:	887b      	ldrh	r3, [r7, #2]
 8001f3a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f3c:	7ffb      	ldrb	r3, [r7, #31]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d00c      	beq.n	8001f5c <HAL_SPI_TransmitReceive+0x4a>
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f48:	d106      	bne.n	8001f58 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d102      	bne.n	8001f58 <HAL_SPI_TransmitReceive+0x46>
 8001f52:	7ffb      	ldrb	r3, [r7, #31]
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d001      	beq.n	8001f5c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e17f      	b.n	800225c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_SPI_TransmitReceive+0x5c>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <HAL_SPI_TransmitReceive+0x5c>
 8001f68:	887b      	ldrh	r3, [r7, #2]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e174      	b.n	800225c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_SPI_TransmitReceive+0x6e>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e16d      	b.n	800225c <HAL_SPI_TransmitReceive+0x34a>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d003      	beq.n	8001f9c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2205      	movs	r2, #5
 8001f98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	887a      	ldrh	r2, [r7, #2]
 8001fac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	887a      	ldrh	r2, [r7, #2]
 8001fb2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	887a      	ldrh	r2, [r7, #2]
 8001fbe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	887a      	ldrh	r2, [r7, #2]
 8001fc4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fdc:	2b40      	cmp	r3, #64	@ 0x40
 8001fde:	d007      	beq.n	8001ff0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ff8:	d17e      	bne.n	80020f8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <HAL_SPI_TransmitReceive+0xf6>
 8002002:	8afb      	ldrh	r3, [r7, #22]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d16c      	bne.n	80020e2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200c:	881a      	ldrh	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002018:	1c9a      	adds	r2, r3, #2
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002022:	b29b      	uxth	r3, r3
 8002024:	3b01      	subs	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800202c:	e059      	b.n	80020e2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b02      	cmp	r3, #2
 800203a:	d11b      	bne.n	8002074 <HAL_SPI_TransmitReceive+0x162>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002040:	b29b      	uxth	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d016      	beq.n	8002074 <HAL_SPI_TransmitReceive+0x162>
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	2b01      	cmp	r3, #1
 800204a:	d113      	bne.n	8002074 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002050:	881a      	ldrh	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	1c9a      	adds	r2, r3, #2
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002066:	b29b      	uxth	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b01      	cmp	r3, #1
 8002080:	d119      	bne.n	80020b6 <HAL_SPI_TransmitReceive+0x1a4>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002086:	b29b      	uxth	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d014      	beq.n	80020b6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002096:	b292      	uxth	r2, r2
 8002098:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800209e:	1c9a      	adds	r2, r3, #2
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020b2:	2301      	movs	r3, #1
 80020b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80020b6:	f7fe fccd 	bl	8000a54 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d80d      	bhi.n	80020e2 <HAL_SPI_TransmitReceive+0x1d0>
 80020c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d009      	beq.n	80020e2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e0bc      	b.n	800225c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1a0      	bne.n	800202e <HAL_SPI_TransmitReceive+0x11c>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d19b      	bne.n	800202e <HAL_SPI_TransmitReceive+0x11c>
 80020f6:	e082      	b.n	80021fe <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <HAL_SPI_TransmitReceive+0x1f4>
 8002100:	8afb      	ldrh	r3, [r7, #22]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d171      	bne.n	80021ea <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	330c      	adds	r3, #12
 8002110:	7812      	ldrb	r2, [r2, #0]
 8002112:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002122:	b29b      	uxth	r3, r3
 8002124:	3b01      	subs	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800212c:	e05d      	b.n	80021ea <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b02      	cmp	r3, #2
 800213a:	d11c      	bne.n	8002176 <HAL_SPI_TransmitReceive+0x264>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d017      	beq.n	8002176 <HAL_SPI_TransmitReceive+0x264>
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	2b01      	cmp	r3, #1
 800214a:	d114      	bne.n	8002176 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	330c      	adds	r3, #12
 8002156:	7812      	ldrb	r2, [r2, #0]
 8002158:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002168:	b29b      	uxth	r3, r3
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	d119      	bne.n	80021b8 <HAL_SPI_TransmitReceive+0x2a6>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d014      	beq.n	80021b8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021b4:	2301      	movs	r3, #1
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80021b8:	f7fe fc4c 	bl	8000a54 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d803      	bhi.n	80021d0 <HAL_SPI_TransmitReceive+0x2be>
 80021c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ce:	d102      	bne.n	80021d6 <HAL_SPI_TransmitReceive+0x2c4>
 80021d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e038      	b.n	800225c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d19c      	bne.n	800212e <HAL_SPI_TransmitReceive+0x21c>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d197      	bne.n	800212e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021fe:	6a3a      	ldr	r2, [r7, #32]
 8002200:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f8b6 	bl	8002374 <SPI_EndRxTxTransaction>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d008      	beq.n	8002220 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2220      	movs	r2, #32
 8002212:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e01d      	b.n	800225c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10a      	bne.n	800223e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002228:	2300      	movs	r3, #0
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800225a:	2300      	movs	r3, #0
  }
}
 800225c:	4618      	mov	r0, r3
 800225e:	3728      	adds	r7, #40	@ 0x28
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	4613      	mov	r3, r2
 8002272:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002274:	f7fe fbee 	bl	8000a54 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	4413      	add	r3, r2
 8002282:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002284:	f7fe fbe6 	bl	8000a54 <HAL_GetTick>
 8002288:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800228a:	4b39      	ldr	r3, [pc, #228]	@ (8002370 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	015b      	lsls	r3, r3, #5
 8002290:	0d1b      	lsrs	r3, r3, #20
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	fb02 f303 	mul.w	r3, r2, r3
 8002298:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800229a:	e055      	b.n	8002348 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a2:	d051      	beq.n	8002348 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022a4:	f7fe fbd6 	bl	8000a54 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d902      	bls.n	80022ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d13d      	bne.n	8002336 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80022c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022d2:	d111      	bne.n	80022f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022dc:	d004      	beq.n	80022e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022e6:	d107      	bne.n	80022f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002300:	d10f      	bne.n	8002322 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002320:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e018      	b.n	8002368 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d102      	bne.n	8002342 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	e002      	b.n	8002348 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	3b01      	subs	r3, #1
 8002346:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	4013      	ands	r3, r2
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	429a      	cmp	r2, r3
 8002356:	bf0c      	ite	eq
 8002358:	2301      	moveq	r3, #1
 800235a:	2300      	movne	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	429a      	cmp	r2, r3
 8002364:	d19a      	bne.n	800229c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3720      	adds	r7, #32
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000000 	.word	0x20000000

08002374 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af02      	add	r7, sp, #8
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2201      	movs	r2, #1
 8002388:	2102      	movs	r1, #2
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f7ff ff6a 	bl	8002264 <SPI_WaitFlagStateUntilTimeout>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d007      	beq.n	80023a6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800239a:	f043 0220 	orr.w	r2, r3, #32
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e032      	b.n	800240c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80023a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <SPI_EndRxTxTransaction+0xa0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002418 <SPI_EndRxTxTransaction+0xa4>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	0d5b      	lsrs	r3, r3, #21
 80023b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023b6:	fb02 f303 	mul.w	r3, r2, r3
 80023ba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023c4:	d112      	bne.n	80023ec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2200      	movs	r2, #0
 80023ce:	2180      	movs	r1, #128	@ 0x80
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f7ff ff47 	bl	8002264 <SPI_WaitFlagStateUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d016      	beq.n	800240a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e0:	f043 0220 	orr.w	r2, r3, #32
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e00f      	b.n	800240c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00a      	beq.n	8002408 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002402:	2b80      	cmp	r3, #128	@ 0x80
 8002404:	d0f2      	beq.n	80023ec <SPI_EndRxTxTransaction+0x78>
 8002406:	e000      	b.n	800240a <SPI_EndRxTxTransaction+0x96>
        break;
 8002408:	bf00      	nop
  }

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000000 	.word	0x20000000
 8002418:	165e9f81 	.word	0x165e9f81

0800241c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002420:	4904      	ldr	r1, [pc, #16]	@ (8002434 <MX_FATFS_Init+0x18>)
 8002422:	4805      	ldr	r0, [pc, #20]	@ (8002438 <MX_FATFS_Init+0x1c>)
 8002424:	f002 fff0 	bl	8005408 <FATFS_LinkDriver>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	4b03      	ldr	r3, [pc, #12]	@ (800243c <MX_FATFS_Init+0x20>)
 800242e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}
 8002434:	200000a0 	.word	0x200000a0
 8002438:	2000000c 	.word	0x2000000c
 800243c:	2000009c 	.word	0x2000009c

08002440 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002444:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002446:	4618      	mov	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	4618      	mov	r0, r3
 800245e:	f000 f9d3 	bl	8002808 <USER_SPI_initialize>
 8002462:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fab1 	bl	80029e0 <USER_SPI_status>
 800247e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	4603      	mov	r3, r0
 8002496:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);return RES_OK;
 8002498:	7bf8      	ldrb	r0, [r7, #15]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	68b9      	ldr	r1, [r7, #8]
 80024a0:	f000 fab4 	bl	8002a0c <USER_SPI_read>
 80024a4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b084      	sub	sp, #16
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
 80024ba:	4603      	mov	r3, r0
 80024bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80024be:	7bf8      	ldrb	r0, [r7, #15]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	f000 fb07 	bl	8002ad8 <USER_SPI_write>
 80024ca:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	603a      	str	r2, [r7, #0]
 80024de:	71fb      	strb	r3, [r7, #7]
 80024e0:	460b      	mov	r3, r1
 80024e2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80024e4:	79b9      	ldrb	r1, [r7, #6]
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fb70 	bl	8002bd0 <USER_SPI_ioctl>
 80024f0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002504:	f7fe faa6 	bl	8000a54 <HAL_GetTick>
 8002508:	4603      	mov	r3, r0
 800250a:	4a04      	ldr	r2, [pc, #16]	@ (800251c <SPI_Timer_On+0x20>)
 800250c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800250e:	4a04      	ldr	r2, [pc, #16]	@ (8002520 <SPI_Timer_On+0x24>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6013      	str	r3, [r2, #0]
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	200000a8 	.word	0x200000a8
 8002520:	200000ac 	.word	0x200000ac

08002524 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002528:	f7fe fa94 	bl	8000a54 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <SPI_Timer_Status+0x24>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	1ad2      	subs	r2, r2, r3
 8002534:	4b05      	ldr	r3, [pc, #20]	@ (800254c <SPI_Timer_Status+0x28>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	bf34      	ite	cc
 800253c:	2301      	movcc	r3, #1
 800253e:	2300      	movcs	r3, #0
 8002540:	b2db      	uxtb	r3, r3
}
 8002542:	4618      	mov	r0, r3
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	200000a8 	.word	0x200000a8
 800254c:	200000ac 	.word	0x200000ac

08002550 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af02      	add	r7, sp, #8
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800255a:	f107 020f 	add.w	r2, r7, #15
 800255e:	1df9      	adds	r1, r7, #7
 8002560:	2332      	movs	r3, #50	@ 0x32
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	2301      	movs	r3, #1
 8002566:	4804      	ldr	r0, [pc, #16]	@ (8002578 <xchg_spi+0x28>)
 8002568:	f7ff fcd3 	bl	8001f12 <HAL_SPI_TransmitReceive>
    return rxDat;
 800256c:	7bfb      	ldrb	r3, [r7, #15]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000040 	.word	0x20000040

0800257c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	e00a      	b.n	80025a2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	18d4      	adds	r4, r2, r3
 8002592:	20ff      	movs	r0, #255	@ 0xff
 8002594:	f7ff ffdc 	bl	8002550 <xchg_spi>
 8002598:	4603      	mov	r3, r0
 800259a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	3301      	adds	r3, #1
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d3f0      	bcc.n	800258c <rcvr_spi_multi+0x10>
	}
}
 80025aa:	bf00      	nop
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd90      	pop	{r4, r7, pc}

080025b4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	f04f 33ff 	mov.w	r3, #4294967295
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4803      	ldr	r0, [pc, #12]	@ (80025d8 <xmit_spi_multi+0x24>)
 80025ca:	f7ff fb5e 	bl	8001c8a <HAL_SPI_Transmit>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000040 	.word	0x20000040

080025dc <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80025e4:	f7fe fa36 	bl	8000a54 <HAL_GetTick>
 80025e8:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80025ee:	20ff      	movs	r0, #255	@ 0xff
 80025f0:	f7ff ffae 	bl	8002550 <xchg_spi>
 80025f4:	4603      	mov	r3, r0
 80025f6:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	2bff      	cmp	r3, #255	@ 0xff
 80025fc:	d007      	beq.n	800260e <wait_ready+0x32>
 80025fe:	f7fe fa29 	bl	8000a54 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	429a      	cmp	r2, r3
 800260c:	d8ef      	bhi.n	80025ee <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	2bff      	cmp	r3, #255	@ 0xff
 8002612:	bf0c      	ite	eq
 8002614:	2301      	moveq	r3, #1
 8002616:	2300      	movne	r3, #0
 8002618:	b2db      	uxtb	r3, r3
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002628:	2201      	movs	r2, #1
 800262a:	2140      	movs	r1, #64	@ 0x40
 800262c:	4803      	ldr	r0, [pc, #12]	@ (800263c <despiselect+0x18>)
 800262e:	f7fe fcbb 	bl	8000fa8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002632:	20ff      	movs	r0, #255	@ 0xff
 8002634:	f7ff ff8c 	bl	8002550 <xchg_spi>

}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40020400 	.word	0x40020400

08002640 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002644:	2200      	movs	r2, #0
 8002646:	2140      	movs	r1, #64	@ 0x40
 8002648:	4809      	ldr	r0, [pc, #36]	@ (8002670 <spiselect+0x30>)
 800264a:	f7fe fcad 	bl	8000fa8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800264e:	20ff      	movs	r0, #255	@ 0xff
 8002650:	f7ff ff7e 	bl	8002550 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002654:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002658:	f7ff ffc0 	bl	80025dc <wait_ready>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <spiselect+0x26>
 8002662:	2301      	movs	r3, #1
 8002664:	e002      	b.n	800266c <spiselect+0x2c>

	despiselect();
 8002666:	f7ff ffdd 	bl	8002624 <despiselect>
	return 0;	/* Timeout */
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40020400 	.word	0x40020400

08002674 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800267e:	20c8      	movs	r0, #200	@ 0xc8
 8002680:	f7ff ff3c 	bl	80024fc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002684:	20ff      	movs	r0, #255	@ 0xff
 8002686:	f7ff ff63 	bl	8002550 <xchg_spi>
 800268a:	4603      	mov	r3, r0
 800268c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	2bff      	cmp	r3, #255	@ 0xff
 8002692:	d104      	bne.n	800269e <rcvr_datablock+0x2a>
 8002694:	f7ff ff46 	bl	8002524 <SPI_Timer_Status>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f2      	bne.n	8002684 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	2bfe      	cmp	r3, #254	@ 0xfe
 80026a2:	d001      	beq.n	80026a8 <rcvr_datablock+0x34>
 80026a4:	2300      	movs	r3, #0
 80026a6:	e00a      	b.n	80026be <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80026a8:	6839      	ldr	r1, [r7, #0]
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff ff66 	bl	800257c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80026b0:	20ff      	movs	r0, #255	@ 0xff
 80026b2:	f7ff ff4d 	bl	8002550 <xchg_spi>
 80026b6:	20ff      	movs	r0, #255	@ 0xff
 80026b8:	f7ff ff4a 	bl	8002550 <xchg_spi>

	return 1;						/* Function succeeded */
 80026bc:	2301      	movs	r3, #1
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b084      	sub	sp, #16
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	460b      	mov	r3, r1
 80026d0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80026d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026d6:	f7ff ff81 	bl	80025dc <wait_ready>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <xmit_datablock+0x1e>
 80026e0:	2300      	movs	r3, #0
 80026e2:	e01e      	b.n	8002722 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff ff32 	bl	8002550 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	2bfd      	cmp	r3, #253	@ 0xfd
 80026f0:	d016      	beq.n	8002720 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80026f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ff5c 	bl	80025b4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80026fc:	20ff      	movs	r0, #255	@ 0xff
 80026fe:	f7ff ff27 	bl	8002550 <xchg_spi>
 8002702:	20ff      	movs	r0, #255	@ 0xff
 8002704:	f7ff ff24 	bl	8002550 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002708:	20ff      	movs	r0, #255	@ 0xff
 800270a:	f7ff ff21 	bl	8002550 <xchg_spi>
 800270e:	4603      	mov	r3, r0
 8002710:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	2b05      	cmp	r3, #5
 800271a:	d001      	beq.n	8002720 <xmit_datablock+0x5a>
 800271c:	2300      	movs	r3, #0
 800271e:	e000      	b.n	8002722 <xmit_datablock+0x5c>
	}
	return 1;
 8002720:	2301      	movs	r3, #1
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	6039      	str	r1, [r7, #0]
 8002734:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	2b00      	cmp	r3, #0
 800273c:	da0e      	bge.n	800275c <send_cmd+0x32>
		cmd &= 0x7F;
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002744:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002746:	2100      	movs	r1, #0
 8002748:	2037      	movs	r0, #55	@ 0x37
 800274a:	f7ff ffee 	bl	800272a <send_cmd>
 800274e:	4603      	mov	r3, r0
 8002750:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002752:	7bbb      	ldrb	r3, [r7, #14]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d901      	bls.n	800275c <send_cmd+0x32>
 8002758:	7bbb      	ldrb	r3, [r7, #14]
 800275a:	e051      	b.n	8002800 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	2b0c      	cmp	r3, #12
 8002760:	d008      	beq.n	8002774 <send_cmd+0x4a>
		despiselect();
 8002762:	f7ff ff5f 	bl	8002624 <despiselect>
		if (!spiselect()) return 0xFF;
 8002766:	f7ff ff6b 	bl	8002640 <spiselect>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <send_cmd+0x4a>
 8002770:	23ff      	movs	r3, #255	@ 0xff
 8002772:	e045      	b.n	8002800 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800277a:	b2db      	uxtb	r3, r3
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fee7 	bl	8002550 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	0e1b      	lsrs	r3, r3, #24
 8002786:	b2db      	uxtb	r3, r3
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fee1 	bl	8002550 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	0c1b      	lsrs	r3, r3, #16
 8002792:	b2db      	uxtb	r3, r3
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fedb 	bl	8002550 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fed5 	bl	8002550 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fed0 	bl	8002550 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <send_cmd+0x94>
 80027ba:	2395      	movs	r3, #149	@ 0x95
 80027bc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d101      	bne.n	80027c8 <send_cmd+0x9e>
 80027c4:	2387      	movs	r3, #135	@ 0x87
 80027c6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fec0 	bl	8002550 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	2b0c      	cmp	r3, #12
 80027d4:	d102      	bne.n	80027dc <send_cmd+0xb2>
 80027d6:	20ff      	movs	r0, #255	@ 0xff
 80027d8:	f7ff feba 	bl	8002550 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80027dc:	230a      	movs	r3, #10
 80027de:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80027e0:	20ff      	movs	r0, #255	@ 0xff
 80027e2:	f7ff feb5 	bl	8002550 <xchg_spi>
 80027e6:	4603      	mov	r3, r0
 80027e8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80027ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	da05      	bge.n	80027fe <send_cmd+0xd4>
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	3b01      	subs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <send_cmd+0xb6>

	return res;							/* Return received response */
 80027fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <USER_SPI_initialize+0x14>
 8002818:	2301      	movs	r3, #1
 800281a:	e0d6      	b.n	80029ca <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800281c:	4b6d      	ldr	r3, [pc, #436]	@ (80029d4 <USER_SPI_initialize+0x1cc>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <USER_SPI_initialize+0x2a>
 800282a:	4b6a      	ldr	r3, [pc, #424]	@ (80029d4 <USER_SPI_initialize+0x1cc>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	e0cb      	b.n	80029ca <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8002832:	4b69      	ldr	r3, [pc, #420]	@ (80029d8 <USER_SPI_initialize+0x1d0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800283c:	4b66      	ldr	r3, [pc, #408]	@ (80029d8 <USER_SPI_initialize+0x1d0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8002844:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002846:	230a      	movs	r3, #10
 8002848:	73fb      	strb	r3, [r7, #15]
 800284a:	e005      	b.n	8002858 <USER_SPI_initialize+0x50>
 800284c:	20ff      	movs	r0, #255	@ 0xff
 800284e:	f7ff fe7f 	bl	8002550 <xchg_spi>
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	3b01      	subs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f6      	bne.n	800284c <USER_SPI_initialize+0x44>

	ty = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002862:	2100      	movs	r1, #0
 8002864:	2000      	movs	r0, #0
 8002866:	f7ff ff60 	bl	800272a <send_cmd>
 800286a:	4603      	mov	r3, r0
 800286c:	2b01      	cmp	r3, #1
 800286e:	f040 808b 	bne.w	8002988 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002872:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002876:	f7ff fe41 	bl	80024fc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800287a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800287e:	2008      	movs	r0, #8
 8002880:	f7ff ff53 	bl	800272a <send_cmd>
 8002884:	4603      	mov	r3, r0
 8002886:	2b01      	cmp	r3, #1
 8002888:	d151      	bne.n	800292e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800288a:	2300      	movs	r3, #0
 800288c:	73fb      	strb	r3, [r7, #15]
 800288e:	e00d      	b.n	80028ac <USER_SPI_initialize+0xa4>
 8002890:	7bfc      	ldrb	r4, [r7, #15]
 8002892:	20ff      	movs	r0, #255	@ 0xff
 8002894:	f7ff fe5c 	bl	8002550 <xchg_spi>
 8002898:	4603      	mov	r3, r0
 800289a:	461a      	mov	r2, r3
 800289c:	f104 0310 	add.w	r3, r4, #16
 80028a0:	443b      	add	r3, r7
 80028a2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	3301      	adds	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	d9ee      	bls.n	8002890 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80028b2:	7abb      	ldrb	r3, [r7, #10]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d167      	bne.n	8002988 <USER_SPI_initialize+0x180>
 80028b8:	7afb      	ldrb	r3, [r7, #11]
 80028ba:	2baa      	cmp	r3, #170	@ 0xaa
 80028bc:	d164      	bne.n	8002988 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80028be:	bf00      	nop
 80028c0:	f7ff fe30 	bl	8002524 <SPI_Timer_Status>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d007      	beq.n	80028da <USER_SPI_initialize+0xd2>
 80028ca:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80028ce:	20a9      	movs	r0, #169	@ 0xa9
 80028d0:	f7ff ff2b 	bl	800272a <send_cmd>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f2      	bne.n	80028c0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80028da:	f7ff fe23 	bl	8002524 <SPI_Timer_Status>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d051      	beq.n	8002988 <USER_SPI_initialize+0x180>
 80028e4:	2100      	movs	r1, #0
 80028e6:	203a      	movs	r0, #58	@ 0x3a
 80028e8:	f7ff ff1f 	bl	800272a <send_cmd>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d14a      	bne.n	8002988 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80028f2:	2300      	movs	r3, #0
 80028f4:	73fb      	strb	r3, [r7, #15]
 80028f6:	e00d      	b.n	8002914 <USER_SPI_initialize+0x10c>
 80028f8:	7bfc      	ldrb	r4, [r7, #15]
 80028fa:	20ff      	movs	r0, #255	@ 0xff
 80028fc:	f7ff fe28 	bl	8002550 <xchg_spi>
 8002900:	4603      	mov	r3, r0
 8002902:	461a      	mov	r2, r3
 8002904:	f104 0310 	add.w	r3, r4, #16
 8002908:	443b      	add	r3, r7
 800290a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	3301      	adds	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	2b03      	cmp	r3, #3
 8002918:	d9ee      	bls.n	80028f8 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800291a:	7a3b      	ldrb	r3, [r7, #8]
 800291c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <USER_SPI_initialize+0x120>
 8002924:	230c      	movs	r3, #12
 8002926:	e000      	b.n	800292a <USER_SPI_initialize+0x122>
 8002928:	2304      	movs	r3, #4
 800292a:	737b      	strb	r3, [r7, #13]
 800292c:	e02c      	b.n	8002988 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800292e:	2100      	movs	r1, #0
 8002930:	20a9      	movs	r0, #169	@ 0xa9
 8002932:	f7ff fefa 	bl	800272a <send_cmd>
 8002936:	4603      	mov	r3, r0
 8002938:	2b01      	cmp	r3, #1
 800293a:	d804      	bhi.n	8002946 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800293c:	2302      	movs	r3, #2
 800293e:	737b      	strb	r3, [r7, #13]
 8002940:	23a9      	movs	r3, #169	@ 0xa9
 8002942:	73bb      	strb	r3, [r7, #14]
 8002944:	e003      	b.n	800294e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002946:	2301      	movs	r3, #1
 8002948:	737b      	strb	r3, [r7, #13]
 800294a:	2301      	movs	r3, #1
 800294c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800294e:	bf00      	nop
 8002950:	f7ff fde8 	bl	8002524 <SPI_Timer_Status>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d007      	beq.n	800296a <USER_SPI_initialize+0x162>
 800295a:	7bbb      	ldrb	r3, [r7, #14]
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fee3 	bl	800272a <send_cmd>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f2      	bne.n	8002950 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800296a:	f7ff fddb 	bl	8002524 <SPI_Timer_Status>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d007      	beq.n	8002984 <USER_SPI_initialize+0x17c>
 8002974:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002978:	2010      	movs	r0, #16
 800297a:	f7ff fed6 	bl	800272a <send_cmd>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <USER_SPI_initialize+0x180>
				ty = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8002988:	4a14      	ldr	r2, [pc, #80]	@ (80029dc <USER_SPI_initialize+0x1d4>)
 800298a:	7b7b      	ldrb	r3, [r7, #13]
 800298c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800298e:	f7ff fe49 	bl	8002624 <despiselect>

	if (ty) {			/* OK */
 8002992:	7b7b      	ldrb	r3, [r7, #13]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d012      	beq.n	80029be <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8002998:	4b0f      	ldr	r3, [pc, #60]	@ (80029d8 <USER_SPI_initialize+0x1d0>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80029a2:	4b0d      	ldr	r3, [pc, #52]	@ (80029d8 <USER_SPI_initialize+0x1d0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0210 	orr.w	r2, r2, #16
 80029aa:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80029ac:	4b09      	ldr	r3, [pc, #36]	@ (80029d4 <USER_SPI_initialize+0x1cc>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	f023 0301 	bic.w	r3, r3, #1
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	4b06      	ldr	r3, [pc, #24]	@ (80029d4 <USER_SPI_initialize+0x1cc>)
 80029ba:	701a      	strb	r2, [r3, #0]
 80029bc:	e002      	b.n	80029c4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80029be:	4b05      	ldr	r3, [pc, #20]	@ (80029d4 <USER_SPI_initialize+0x1cc>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80029c4:	4b03      	ldr	r3, [pc, #12]	@ (80029d4 <USER_SPI_initialize+0x1cc>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	b2db      	uxtb	r3, r3
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd90      	pop	{r4, r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000020 	.word	0x20000020
 80029d8:	20000040 	.word	0x20000040
 80029dc:	200000a4 	.word	0x200000a4

080029e0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <USER_SPI_status+0x14>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e002      	b.n	80029fa <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80029f4:	4b04      	ldr	r3, [pc, #16]	@ (8002a08 <USER_SPI_status+0x28>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	b2db      	uxtb	r3, r3
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	20000020 	.word	0x20000020

08002a0c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	4603      	mov	r3, r0
 8002a1a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d102      	bne.n	8002a28 <USER_SPI_read+0x1c>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <USER_SPI_read+0x20>
 8002a28:	2304      	movs	r3, #4
 8002a2a:	e04d      	b.n	8002ac8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002a2c:	4b28      	ldr	r3, [pc, #160]	@ (8002ad0 <USER_SPI_read+0xc4>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <USER_SPI_read+0x32>
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e044      	b.n	8002ac8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002a3e:	4b25      	ldr	r3, [pc, #148]	@ (8002ad4 <USER_SPI_read+0xc8>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d102      	bne.n	8002a50 <USER_SPI_read+0x44>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	025b      	lsls	r3, r3, #9
 8002a4e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d111      	bne.n	8002a7a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	2011      	movs	r0, #17
 8002a5a:	f7ff fe66 	bl	800272a <send_cmd>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d129      	bne.n	8002ab8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002a64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a68:	68b8      	ldr	r0, [r7, #8]
 8002a6a:	f7ff fe03 	bl	8002674 <rcvr_datablock>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d021      	beq.n	8002ab8 <USER_SPI_read+0xac>
			count = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	e01e      	b.n	8002ab8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	2012      	movs	r0, #18
 8002a7e:	f7ff fe54 	bl	800272a <send_cmd>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d117      	bne.n	8002ab8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002a88:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a8c:	68b8      	ldr	r0, [r7, #8]
 8002a8e:	f7ff fdf1 	bl	8002674 <rcvr_datablock>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <USER_SPI_read+0xa2>
				buff += 512;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002a9e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	603b      	str	r3, [r7, #0]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1ed      	bne.n	8002a88 <USER_SPI_read+0x7c>
 8002aac:	e000      	b.n	8002ab0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002aae:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	200c      	movs	r0, #12
 8002ab4:	f7ff fe39 	bl	800272a <send_cmd>
		}
	}
	despiselect();
 8002ab8:	f7ff fdb4 	bl	8002624 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	bf14      	ite	ne
 8002ac2:	2301      	movne	r3, #1
 8002ac4:	2300      	moveq	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000020 	.word	0x20000020
 8002ad4:	200000a4 	.word	0x200000a4

08002ad8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d102      	bne.n	8002af4 <USER_SPI_write+0x1c>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <USER_SPI_write+0x20>
 8002af4:	2304      	movs	r3, #4
 8002af6:	e063      	b.n	8002bc0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002af8:	4b33      	ldr	r3, [pc, #204]	@ (8002bc8 <USER_SPI_write+0xf0>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <USER_SPI_write+0x32>
 8002b06:	2303      	movs	r3, #3
 8002b08:	e05a      	b.n	8002bc0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8002bc8 <USER_SPI_write+0xf0>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <USER_SPI_write+0x44>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e051      	b.n	8002bc0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bcc <USER_SPI_write+0xf4>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d102      	bne.n	8002b2e <USER_SPI_write+0x56>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	025b      	lsls	r3, r3, #9
 8002b2c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d110      	bne.n	8002b56 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	2018      	movs	r0, #24
 8002b38:	f7ff fdf7 	bl	800272a <send_cmd>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d136      	bne.n	8002bb0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002b42:	21fe      	movs	r1, #254	@ 0xfe
 8002b44:	68b8      	ldr	r0, [r7, #8]
 8002b46:	f7ff fdbe 	bl	80026c6 <xmit_datablock>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d02f      	beq.n	8002bb0 <USER_SPI_write+0xd8>
			count = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	e02c      	b.n	8002bb0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002b56:	4b1d      	ldr	r3, [pc, #116]	@ (8002bcc <USER_SPI_write+0xf4>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	f003 0306 	and.w	r3, r3, #6
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <USER_SPI_write+0x92>
 8002b62:	6839      	ldr	r1, [r7, #0]
 8002b64:	2097      	movs	r0, #151	@ 0x97
 8002b66:	f7ff fde0 	bl	800272a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	2019      	movs	r0, #25
 8002b6e:	f7ff fddc 	bl	800272a <send_cmd>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d11b      	bne.n	8002bb0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002b78:	21fc      	movs	r1, #252	@ 0xfc
 8002b7a:	68b8      	ldr	r0, [r7, #8]
 8002b7c:	f7ff fda3 	bl	80026c6 <xmit_datablock>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <USER_SPI_write+0xc4>
				buff += 512;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002b8c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1ee      	bne.n	8002b78 <USER_SPI_write+0xa0>
 8002b9a:	e000      	b.n	8002b9e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002b9c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002b9e:	21fd      	movs	r1, #253	@ 0xfd
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f7ff fd90 	bl	80026c6 <xmit_datablock>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <USER_SPI_write+0xd8>
 8002bac:	2301      	movs	r3, #1
 8002bae:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002bb0:	f7ff fd38 	bl	8002624 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	bf14      	ite	ne
 8002bba:	2301      	movne	r3, #1
 8002bbc:	2300      	moveq	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000020 	.word	0x20000020
 8002bcc:	200000a4 	.word	0x200000a4

08002bd0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08c      	sub	sp, #48	@ 0x30
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	603a      	str	r2, [r7, #0]
 8002bda:	71fb      	strb	r3, [r7, #7]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <USER_SPI_ioctl+0x1a>
 8002be6:	2304      	movs	r3, #4
 8002be8:	e15a      	b.n	8002ea0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002bea:	4baf      	ldr	r3, [pc, #700]	@ (8002ea8 <USER_SPI_ioctl+0x2d8>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <USER_SPI_ioctl+0x2c>
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e151      	b.n	8002ea0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8002c02:	79bb      	ldrb	r3, [r7, #6]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	f200 8136 	bhi.w	8002e76 <USER_SPI_ioctl+0x2a6>
 8002c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c10 <USER_SPI_ioctl+0x40>)
 8002c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c10:	08002c25 	.word	0x08002c25
 8002c14:	08002c39 	.word	0x08002c39
 8002c18:	08002e77 	.word	0x08002e77
 8002c1c:	08002ce5 	.word	0x08002ce5
 8002c20:	08002ddb 	.word	0x08002ddb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002c24:	f7ff fd0c 	bl	8002640 <spiselect>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 8127 	beq.w	8002e7e <USER_SPI_ioctl+0x2ae>
 8002c30:	2300      	movs	r3, #0
 8002c32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8002c36:	e122      	b.n	8002e7e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002c38:	2100      	movs	r1, #0
 8002c3a:	2009      	movs	r0, #9
 8002c3c:	f7ff fd75 	bl	800272a <send_cmd>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f040 811d 	bne.w	8002e82 <USER_SPI_ioctl+0x2b2>
 8002c48:	f107 030c 	add.w	r3, r7, #12
 8002c4c:	2110      	movs	r1, #16
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff fd10 	bl	8002674 <rcvr_datablock>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 8113 	beq.w	8002e82 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002c5c:	7b3b      	ldrb	r3, [r7, #12]
 8002c5e:	099b      	lsrs	r3, r3, #6
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d111      	bne.n	8002c8a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002c66:	7d7b      	ldrb	r3, [r7, #21]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	7d3b      	ldrb	r3, [r7, #20]
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	4413      	add	r3, r2
 8002c70:	461a      	mov	r2, r3
 8002c72:	7cfb      	ldrb	r3, [r7, #19]
 8002c74:	041b      	lsls	r3, r3, #16
 8002c76:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	029a      	lsls	r2, r3, #10
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	e028      	b.n	8002cdc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002c8a:	7c7b      	ldrb	r3, [r7, #17]
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	7dbb      	ldrb	r3, [r7, #22]
 8002c94:	09db      	lsrs	r3, r3, #7
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	7d7b      	ldrb	r3, [r7, #21]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	f003 0306 	and.w	r3, r3, #6
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	3302      	adds	r3, #2
 8002cae:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002cb2:	7d3b      	ldrb	r3, [r7, #20]
 8002cb4:	099b      	lsrs	r3, r3, #6
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	7cfb      	ldrb	r3, [r7, #19]
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	441a      	add	r2, r3
 8002cc0:	7cbb      	ldrb	r3, [r7, #18]
 8002cc2:	029b      	lsls	r3, r3, #10
 8002cc4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002cc8:	4413      	add	r3, r2
 8002cca:	3301      	adds	r3, #1
 8002ccc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002cce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002cd2:	3b09      	subs	r3, #9
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8002ce2:	e0ce      	b.n	8002e82 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002ce4:	4b71      	ldr	r3, [pc, #452]	@ (8002eac <USER_SPI_ioctl+0x2dc>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d031      	beq.n	8002d54 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	208d      	movs	r0, #141	@ 0x8d
 8002cf4:	f7ff fd19 	bl	800272a <send_cmd>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 80c3 	bne.w	8002e86 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002d00:	20ff      	movs	r0, #255	@ 0xff
 8002d02:	f7ff fc25 	bl	8002550 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002d06:	f107 030c 	add.w	r3, r7, #12
 8002d0a:	2110      	movs	r1, #16
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fcb1 	bl	8002674 <rcvr_datablock>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80b6 	beq.w	8002e86 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002d1a:	2330      	movs	r3, #48	@ 0x30
 8002d1c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002d20:	e007      	b.n	8002d32 <USER_SPI_ioctl+0x162>
 8002d22:	20ff      	movs	r0, #255	@ 0xff
 8002d24:	f7ff fc14 	bl	8002550 <xchg_spi>
 8002d28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002d32:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f3      	bne.n	8002d22 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002d3a:	7dbb      	ldrb	r3, [r7, #22]
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	2310      	movs	r3, #16
 8002d44:	fa03 f202 	lsl.w	r2, r3, r2
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002d52:	e098      	b.n	8002e86 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002d54:	2100      	movs	r1, #0
 8002d56:	2009      	movs	r0, #9
 8002d58:	f7ff fce7 	bl	800272a <send_cmd>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f040 8091 	bne.w	8002e86 <USER_SPI_ioctl+0x2b6>
 8002d64:	f107 030c 	add.w	r3, r7, #12
 8002d68:	2110      	movs	r1, #16
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fc82 	bl	8002674 <rcvr_datablock>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8087 	beq.w	8002e86 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002d78:	4b4c      	ldr	r3, [pc, #304]	@ (8002eac <USER_SPI_ioctl+0x2dc>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d012      	beq.n	8002daa <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002d84:	7dbb      	ldrb	r3, [r7, #22]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8002d8c:	7dfa      	ldrb	r2, [r7, #23]
 8002d8e:	09d2      	lsrs	r2, r2, #7
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	4413      	add	r3, r2
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	7e7b      	ldrb	r3, [r7, #25]
 8002d98:	099b      	lsrs	r3, r3, #6
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	e013      	b.n	8002dd2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002daa:	7dbb      	ldrb	r3, [r7, #22]
 8002dac:	109b      	asrs	r3, r3, #2
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	3301      	adds	r3, #1
 8002db6:	7dfa      	ldrb	r2, [r7, #23]
 8002db8:	00d2      	lsls	r2, r2, #3
 8002dba:	f002 0218 	and.w	r2, r2, #24
 8002dbe:	7df9      	ldrb	r1, [r7, #23]
 8002dc0:	0949      	lsrs	r1, r1, #5
 8002dc2:	b2c9      	uxtb	r1, r1
 8002dc4:	440a      	add	r2, r1
 8002dc6:	3201      	adds	r2, #1
 8002dc8:	fb02 f303 	mul.w	r3, r2, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8002dd8:	e055      	b.n	8002e86 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002dda:	4b34      	ldr	r3, [pc, #208]	@ (8002eac <USER_SPI_ioctl+0x2dc>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	f003 0306 	and.w	r3, r3, #6
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d051      	beq.n	8002e8a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002de6:	f107 020c 	add.w	r2, r7, #12
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	210b      	movs	r1, #11
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff feee 	bl	8002bd0 <USER_SPI_ioctl>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d149      	bne.n	8002e8e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002dfa:	7b3b      	ldrb	r3, [r7, #12]
 8002dfc:	099b      	lsrs	r3, r3, #6
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d104      	bne.n	8002e0e <USER_SPI_ioctl+0x23e>
 8002e04:	7dbb      	ldrb	r3, [r7, #22]
 8002e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d041      	beq.n	8002e92 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	623b      	str	r3, [r7, #32]
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8002e1e:	4b23      	ldr	r3, [pc, #140]	@ (8002eac <USER_SPI_ioctl+0x2dc>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d105      	bne.n	8002e36 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8002e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2c:	025b      	lsls	r3, r3, #9
 8002e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e32:	025b      	lsls	r3, r3, #9
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002e36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e38:	2020      	movs	r0, #32
 8002e3a:	f7ff fc76 	bl	800272a <send_cmd>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d128      	bne.n	8002e96 <USER_SPI_ioctl+0x2c6>
 8002e44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e46:	2021      	movs	r0, #33	@ 0x21
 8002e48:	f7ff fc6f 	bl	800272a <send_cmd>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d121      	bne.n	8002e96 <USER_SPI_ioctl+0x2c6>
 8002e52:	2100      	movs	r1, #0
 8002e54:	2026      	movs	r0, #38	@ 0x26
 8002e56:	f7ff fc68 	bl	800272a <send_cmd>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d11a      	bne.n	8002e96 <USER_SPI_ioctl+0x2c6>
 8002e60:	f247 5030 	movw	r0, #30000	@ 0x7530
 8002e64:	f7ff fbba 	bl	80025dc <wait_ready>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d013      	beq.n	8002e96 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8002e74:	e00f      	b.n	8002e96 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8002e76:	2304      	movs	r3, #4
 8002e78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002e7c:	e00c      	b.n	8002e98 <USER_SPI_ioctl+0x2c8>
		break;
 8002e7e:	bf00      	nop
 8002e80:	e00a      	b.n	8002e98 <USER_SPI_ioctl+0x2c8>
		break;
 8002e82:	bf00      	nop
 8002e84:	e008      	b.n	8002e98 <USER_SPI_ioctl+0x2c8>
		break;
 8002e86:	bf00      	nop
 8002e88:	e006      	b.n	8002e98 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002e8a:	bf00      	nop
 8002e8c:	e004      	b.n	8002e98 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002e8e:	bf00      	nop
 8002e90:	e002      	b.n	8002e98 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002e92:	bf00      	nop
 8002e94:	e000      	b.n	8002e98 <USER_SPI_ioctl+0x2c8>
		break;
 8002e96:	bf00      	nop
	}

	despiselect();
 8002e98:	f7ff fbc4 	bl	8002624 <despiselect>

	return res;
 8002e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3730      	adds	r7, #48	@ 0x30
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000020 	.word	0x20000020
 8002eac:	200000a4 	.word	0x200000a4

08002eb0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	4a08      	ldr	r2, [pc, #32]	@ (8002ee0 <disk_status+0x30>)
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	79fa      	ldrb	r2, [r7, #7]
 8002ec8:	4905      	ldr	r1, [pc, #20]	@ (8002ee0 <disk_status+0x30>)
 8002eca:	440a      	add	r2, r1
 8002ecc:	7a12      	ldrb	r2, [r2, #8]
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4798      	blx	r3
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	200000d8 	.word	0x200000d8

08002ee4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	4a0e      	ldr	r2, [pc, #56]	@ (8002f30 <disk_initialize+0x4c>)
 8002ef6:	5cd3      	ldrb	r3, [r2, r3]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d114      	bne.n	8002f26 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	4a0c      	ldr	r2, [pc, #48]	@ (8002f30 <disk_initialize+0x4c>)
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	79fa      	ldrb	r2, [r7, #7]
 8002f0a:	4909      	ldr	r1, [pc, #36]	@ (8002f30 <disk_initialize+0x4c>)
 8002f0c:	440a      	add	r2, r1
 8002f0e:	7a12      	ldrb	r2, [r2, #8]
 8002f10:	4610      	mov	r0, r2
 8002f12:	4798      	blx	r3
 8002f14:	4603      	mov	r3, r0
 8002f16:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d103      	bne.n	8002f26 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	4a03      	ldr	r2, [pc, #12]	@ (8002f30 <disk_initialize+0x4c>)
 8002f22:	2101      	movs	r1, #1
 8002f24:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	200000d8 	.word	0x200000d8

08002f34 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002f34:	b590      	push	{r4, r7, lr}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	4603      	mov	r3, r0
 8002f42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	4a0a      	ldr	r2, [pc, #40]	@ (8002f70 <disk_read+0x3c>)
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	689c      	ldr	r4, [r3, #8]
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	4a07      	ldr	r2, [pc, #28]	@ (8002f70 <disk_read+0x3c>)
 8002f54:	4413      	add	r3, r2
 8002f56:	7a18      	ldrb	r0, [r3, #8]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	47a0      	blx	r4
 8002f60:	4603      	mov	r3, r0
 8002f62:	75fb      	strb	r3, [r7, #23]
  return res;
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	371c      	adds	r7, #28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd90      	pop	{r4, r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	200000d8 	.word	0x200000d8

08002f74 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	4603      	mov	r3, r0
 8002f82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb0 <disk_write+0x3c>)
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	68dc      	ldr	r4, [r3, #12]
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	4a07      	ldr	r2, [pc, #28]	@ (8002fb0 <disk_write+0x3c>)
 8002f94:	4413      	add	r3, r2
 8002f96:	7a18      	ldrb	r0, [r3, #8]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	47a0      	blx	r4
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	75fb      	strb	r3, [r7, #23]
  return res;
 8002fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	371c      	adds	r7, #28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd90      	pop	{r4, r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	200000d8 	.word	0x200000d8

08002fb4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	603a      	str	r2, [r7, #0]
 8002fbe:	71fb      	strb	r3, [r7, #7]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	4a09      	ldr	r2, [pc, #36]	@ (8002fec <disk_ioctl+0x38>)
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	79fa      	ldrb	r2, [r7, #7]
 8002fd2:	4906      	ldr	r1, [pc, #24]	@ (8002fec <disk_ioctl+0x38>)
 8002fd4:	440a      	add	r2, r1
 8002fd6:	7a10      	ldrb	r0, [r2, #8]
 8002fd8:	79b9      	ldrb	r1, [r7, #6]
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	4798      	blx	r3
 8002fde:	4603      	mov	r3, r0
 8002fe0:	73fb      	strb	r3, [r7, #15]
  return res;
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	200000d8 	.word	0x200000d8

08002ff0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003000:	89fb      	ldrh	r3, [r7, #14]
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	b21a      	sxth	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	b21b      	sxth	r3, r3
 800300c:	4313      	orrs	r3, r2
 800300e:	b21b      	sxth	r3, r3
 8003010:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003012:	89fb      	ldrh	r3, [r7, #14]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3303      	adds	r3, #3
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	3202      	adds	r2, #2
 8003038:	7812      	ldrb	r2, [r2, #0]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	3201      	adds	r2, #1
 8003046:	7812      	ldrb	r2, [r2, #0]
 8003048:	4313      	orrs	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	7812      	ldrb	r2, [r2, #0]
 8003054:	4313      	orrs	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
	return rv;
 8003058:	68fb      	ldr	r3, [r7, #12]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	460b      	mov	r3, r1
 8003070:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	887a      	ldrh	r2, [r7, #2]
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	887b      	ldrh	r3, [r7, #2]
 8003080:	0a1b      	lsrs	r3, r3, #8
 8003082:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	887a      	ldrh	r2, [r7, #2]
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	701a      	strb	r2, [r3, #0]
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	701a      	strb	r2, [r3, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	0a1b      	lsrs	r3, r3, #8
 80030b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	701a      	strb	r2, [r3, #0]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	0a1b      	lsrs	r3, r3, #8
 80030c8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	701a      	strb	r2, [r3, #0]
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00d      	beq.n	800312a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	1c53      	adds	r3, r2, #1
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	1c59      	adds	r1, r3, #1
 8003118:	6179      	str	r1, [r7, #20]
 800311a:	7812      	ldrb	r2, [r2, #0]
 800311c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3b01      	subs	r3, #1
 8003122:	607b      	str	r3, [r7, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f1      	bne.n	800310e <mem_cpy+0x1a>
	}
}
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003136:	b480      	push	{r7}
 8003138:	b087      	sub	sp, #28
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	617a      	str	r2, [r7, #20]
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3b01      	subs	r3, #1
 8003156:	607b      	str	r3, [r7, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f3      	bne.n	8003146 <mem_set+0x10>
}
 800315e:	bf00      	nop
 8003160:	bf00      	nop
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800316c:	b480      	push	{r7}
 800316e:	b089      	sub	sp, #36	@ 0x24
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	61fb      	str	r3, [r7, #28]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	61fa      	str	r2, [r7, #28]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	4619      	mov	r1, r3
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	61ba      	str	r2, [r7, #24]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	1acb      	subs	r3, r1, r3
 8003198:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3b01      	subs	r3, #1
 800319e:	607b      	str	r3, [r7, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <mem_cmp+0x40>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0eb      	beq.n	8003184 <mem_cmp+0x18>

	return r;
 80031ac:	697b      	ldr	r3, [r7, #20]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3724      	adds	r7, #36	@ 0x24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80031c4:	e002      	b.n	80031cc <chk_chr+0x12>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3301      	adds	r3, #1
 80031ca:	607b      	str	r3, [r7, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <chk_chr+0x26>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	4293      	cmp	r3, r2
 80031de:	d1f2      	bne.n	80031c6 <chk_chr+0xc>
	return *str;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	781b      	ldrb	r3, [r3, #0]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80031fa:	2300      	movs	r3, #0
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	e029      	b.n	8003258 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003204:	4a27      	ldr	r2, [pc, #156]	@ (80032a4 <chk_lock+0xb4>)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	4413      	add	r3, r2
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d01d      	beq.n	800324e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003212:	4a24      	ldr	r2, [pc, #144]	@ (80032a4 <chk_lock+0xb4>)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	4413      	add	r3, r2
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d116      	bne.n	8003252 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003224:	4a1f      	ldr	r2, [pc, #124]	@ (80032a4 <chk_lock+0xb4>)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	4413      	add	r3, r2
 800322c:	3304      	adds	r3, #4
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003234:	429a      	cmp	r2, r3
 8003236:	d10c      	bne.n	8003252 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003238:	4a1a      	ldr	r2, [pc, #104]	@ (80032a4 <chk_lock+0xb4>)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	4413      	add	r3, r2
 8003240:	3308      	adds	r3, #8
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003248:	429a      	cmp	r2, r3
 800324a:	d102      	bne.n	8003252 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800324c:	e007      	b.n	800325e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800324e:	2301      	movs	r3, #1
 8003250:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	3301      	adds	r3, #1
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d9d2      	bls.n	8003204 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d109      	bne.n	8003278 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d102      	bne.n	8003270 <chk_lock+0x80>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d101      	bne.n	8003274 <chk_lock+0x84>
 8003270:	2300      	movs	r3, #0
 8003272:	e010      	b.n	8003296 <chk_lock+0xa6>
 8003274:	2312      	movs	r3, #18
 8003276:	e00e      	b.n	8003296 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d108      	bne.n	8003290 <chk_lock+0xa0>
 800327e:	4a09      	ldr	r2, [pc, #36]	@ (80032a4 <chk_lock+0xb4>)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	4413      	add	r3, r2
 8003286:	330c      	adds	r3, #12
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800328e:	d101      	bne.n	8003294 <chk_lock+0xa4>
 8003290:	2310      	movs	r3, #16
 8003292:	e000      	b.n	8003296 <chk_lock+0xa6>
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	200000b8 	.word	0x200000b8

080032a8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80032ae:	2300      	movs	r3, #0
 80032b0:	607b      	str	r3, [r7, #4]
 80032b2:	e002      	b.n	80032ba <enq_lock+0x12>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3301      	adds	r3, #1
 80032b8:	607b      	str	r3, [r7, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d806      	bhi.n	80032ce <enq_lock+0x26>
 80032c0:	4a09      	ldr	r2, [pc, #36]	@ (80032e8 <enq_lock+0x40>)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	4413      	add	r3, r2
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f2      	bne.n	80032b4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	bf14      	ite	ne
 80032d4:	2301      	movne	r3, #1
 80032d6:	2300      	moveq	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	200000b8 	.word	0x200000b8

080032ec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	e01f      	b.n	800333c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80032fc:	4a41      	ldr	r2, [pc, #260]	@ (8003404 <inc_lock+0x118>)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	4413      	add	r3, r2
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d113      	bne.n	8003336 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800330e:	4a3d      	ldr	r2, [pc, #244]	@ (8003404 <inc_lock+0x118>)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	4413      	add	r3, r2
 8003316:	3304      	adds	r3, #4
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800331e:	429a      	cmp	r2, r3
 8003320:	d109      	bne.n	8003336 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003322:	4a38      	ldr	r2, [pc, #224]	@ (8003404 <inc_lock+0x118>)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	4413      	add	r3, r2
 800332a:	3308      	adds	r3, #8
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003332:	429a      	cmp	r2, r3
 8003334:	d006      	beq.n	8003344 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	3301      	adds	r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d9dc      	bls.n	80032fc <inc_lock+0x10>
 8003342:	e000      	b.n	8003346 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003344:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d132      	bne.n	80033b2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	e002      	b.n	8003358 <inc_lock+0x6c>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	3301      	adds	r3, #1
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d806      	bhi.n	800336c <inc_lock+0x80>
 800335e:	4a29      	ldr	r2, [pc, #164]	@ (8003404 <inc_lock+0x118>)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	4413      	add	r3, r2
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f2      	bne.n	8003352 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d101      	bne.n	8003376 <inc_lock+0x8a>
 8003372:	2300      	movs	r3, #0
 8003374:	e040      	b.n	80033f8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	4922      	ldr	r1, [pc, #136]	@ (8003404 <inc_lock+0x118>)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	440b      	add	r3, r1
 8003382:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	491e      	ldr	r1, [pc, #120]	@ (8003404 <inc_lock+0x118>)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	440b      	add	r3, r1
 8003390:	3304      	adds	r3, #4
 8003392:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	491a      	ldr	r1, [pc, #104]	@ (8003404 <inc_lock+0x118>)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	440b      	add	r3, r1
 80033a0:	3308      	adds	r3, #8
 80033a2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80033a4:	4a17      	ldr	r2, [pc, #92]	@ (8003404 <inc_lock+0x118>)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	4413      	add	r3, r2
 80033ac:	330c      	adds	r3, #12
 80033ae:	2200      	movs	r2, #0
 80033b0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d009      	beq.n	80033cc <inc_lock+0xe0>
 80033b8:	4a12      	ldr	r2, [pc, #72]	@ (8003404 <inc_lock+0x118>)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	4413      	add	r3, r2
 80033c0:	330c      	adds	r3, #12
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <inc_lock+0xe0>
 80033c8:	2300      	movs	r3, #0
 80033ca:	e015      	b.n	80033f8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d108      	bne.n	80033e4 <inc_lock+0xf8>
 80033d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003404 <inc_lock+0x118>)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	4413      	add	r3, r2
 80033da:	330c      	adds	r3, #12
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	3301      	adds	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	e001      	b.n	80033e8 <inc_lock+0xfc>
 80033e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033e8:	4906      	ldr	r1, [pc, #24]	@ (8003404 <inc_lock+0x118>)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	440b      	add	r3, r1
 80033f0:	330c      	adds	r3, #12
 80033f2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	3301      	adds	r3, #1
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	200000b8 	.word	0x200000b8

08003408 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3b01      	subs	r3, #1
 8003414:	607b      	str	r3, [r7, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d825      	bhi.n	8003468 <dec_lock+0x60>
		n = Files[i].ctr;
 800341c:	4a17      	ldr	r2, [pc, #92]	@ (800347c <dec_lock+0x74>)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	4413      	add	r3, r2
 8003424:	330c      	adds	r3, #12
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800342a:	89fb      	ldrh	r3, [r7, #14]
 800342c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003430:	d101      	bne.n	8003436 <dec_lock+0x2e>
 8003432:	2300      	movs	r3, #0
 8003434:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003436:	89fb      	ldrh	r3, [r7, #14]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <dec_lock+0x3a>
 800343c:	89fb      	ldrh	r3, [r7, #14]
 800343e:	3b01      	subs	r3, #1
 8003440:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003442:	4a0e      	ldr	r2, [pc, #56]	@ (800347c <dec_lock+0x74>)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	4413      	add	r3, r2
 800344a:	330c      	adds	r3, #12
 800344c:	89fa      	ldrh	r2, [r7, #14]
 800344e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003450:	89fb      	ldrh	r3, [r7, #14]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d105      	bne.n	8003462 <dec_lock+0x5a>
 8003456:	4a09      	ldr	r2, [pc, #36]	@ (800347c <dec_lock+0x74>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	4413      	add	r3, r2
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	737b      	strb	r3, [r7, #13]
 8003466:	e001      	b.n	800346c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003468:	2302      	movs	r3, #2
 800346a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800346c:	7b7b      	ldrb	r3, [r7, #13]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	200000b8 	.word	0x200000b8

08003480 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e010      	b.n	80034b0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800348e:	4a0d      	ldr	r2, [pc, #52]	@ (80034c4 <clear_lock+0x44>)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	4413      	add	r3, r2
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	429a      	cmp	r2, r3
 800349c:	d105      	bne.n	80034aa <clear_lock+0x2a>
 800349e:	4a09      	ldr	r2, [pc, #36]	@ (80034c4 <clear_lock+0x44>)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	4413      	add	r3, r2
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	3301      	adds	r3, #1
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d9eb      	bls.n	800348e <clear_lock+0xe>
	}
}
 80034b6:	bf00      	nop
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	200000b8 	.word	0x200000b8

080034c8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	78db      	ldrb	r3, [r3, #3]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d034      	beq.n	8003546 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	7858      	ldrb	r0, [r3, #1]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80034ec:	2301      	movs	r3, #1
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	f7ff fd40 	bl	8002f74 <disk_write>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <sync_window+0x38>
			res = FR_DISK_ERR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
 80034fe:	e022      	b.n	8003546 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	1ad2      	subs	r2, r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	429a      	cmp	r2, r3
 8003514:	d217      	bcs.n	8003546 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	789b      	ldrb	r3, [r3, #2]
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	e010      	b.n	8003540 <sync_window+0x78>
					wsect += fs->fsize;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4413      	add	r3, r2
 8003526:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	7858      	ldrb	r0, [r3, #1]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003532:	2301      	movs	r3, #1
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	f7ff fd1d 	bl	8002f74 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	3b01      	subs	r3, #1
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d8eb      	bhi.n	800351e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003546:	7bfb      	ldrb	r3, [r7, #15]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d01b      	beq.n	80035a0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ffad 	bl	80034c8 <sync_window>
 800356e:	4603      	mov	r3, r0
 8003570:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d113      	bne.n	80035a0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	7858      	ldrb	r0, [r3, #1]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003582:	2301      	movs	r3, #1
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	f7ff fcd5 	bl	8002f34 <disk_read>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d004      	beq.n	800359a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003590:	f04f 33ff 	mov.w	r3, #4294967295
 8003594:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003596:	2301      	movs	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7ff ff87 	bl	80034c8 <sync_window>
 80035ba:	4603      	mov	r3, r0
 80035bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d158      	bne.n	8003676 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d148      	bne.n	800365e <sync_fs+0xb2>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	791b      	ldrb	r3, [r3, #4]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d144      	bne.n	800365e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3330      	adds	r3, #48	@ 0x30
 80035d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035dc:	2100      	movs	r1, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff fda9 	bl	8003136 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3330      	adds	r3, #48	@ 0x30
 80035e8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80035ec:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fd38 	bl	8003066 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3330      	adds	r3, #48	@ 0x30
 80035fa:	4921      	ldr	r1, [pc, #132]	@ (8003680 <sync_fs+0xd4>)
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff fd4d 	bl	800309c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3330      	adds	r3, #48	@ 0x30
 8003606:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800360a:	491e      	ldr	r1, [pc, #120]	@ (8003684 <sync_fs+0xd8>)
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff fd45 	bl	800309c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3330      	adds	r3, #48	@ 0x30
 8003616:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	4619      	mov	r1, r3
 8003620:	4610      	mov	r0, r2
 8003622:	f7ff fd3b 	bl	800309c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3330      	adds	r3, #48	@ 0x30
 800362a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	4619      	mov	r1, r3
 8003634:	4610      	mov	r0, r2
 8003636:	f7ff fd31 	bl	800309c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	7858      	ldrb	r0, [r3, #1]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003652:	2301      	movs	r3, #1
 8003654:	f7ff fc8e 	bl	8002f74 <disk_write>
			fs->fsi_flag = 0;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	785b      	ldrb	r3, [r3, #1]
 8003662:	2200      	movs	r2, #0
 8003664:	2100      	movs	r1, #0
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff fca4 	bl	8002fb4 <disk_ioctl>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <sync_fs+0xca>
 8003672:	2301      	movs	r3, #1
 8003674:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003676:	7bfb      	ldrb	r3, [r7, #15]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	41615252 	.word	0x41615252
 8003684:	61417272 	.word	0x61417272

08003688 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	3b02      	subs	r3, #2
 8003696:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	3b02      	subs	r3, #2
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d301      	bcc.n	80036a8 <clust2sect+0x20>
 80036a4:	2300      	movs	r3, #0
 80036a6:	e008      	b.n	80036ba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	895b      	ldrh	r3, [r3, #10]
 80036ac:	461a      	mov	r2, r3
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	fb03 f202 	mul.w	r2, r3, r2
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b8:	4413      	add	r3, r2
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d904      	bls.n	80036e6 <get_fat+0x20>
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d302      	bcc.n	80036ec <get_fat+0x26>
		val = 1;	/* Internal error */
 80036e6:	2301      	movs	r3, #1
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	e08e      	b.n	800380a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80036ec:	f04f 33ff 	mov.w	r3, #4294967295
 80036f0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d061      	beq.n	80037be <get_fat+0xf8>
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	dc7b      	bgt.n	80037f6 <get_fat+0x130>
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d002      	beq.n	8003708 <get_fat+0x42>
 8003702:	2b02      	cmp	r3, #2
 8003704:	d041      	beq.n	800378a <get_fat+0xc4>
 8003706:	e076      	b.n	80037f6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	085b      	lsrs	r3, r3, #1
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4413      	add	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	6a1a      	ldr	r2, [r3, #32]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	0a5b      	lsrs	r3, r3, #9
 800371e:	4413      	add	r3, r2
 8003720:	4619      	mov	r1, r3
 8003722:	6938      	ldr	r0, [r7, #16]
 8003724:	f7ff ff14 	bl	8003550 <move_window>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d166      	bne.n	80037fc <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	60fa      	str	r2, [r7, #12]
 8003734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4413      	add	r3, r2
 800373c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003740:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	6a1a      	ldr	r2, [r3, #32]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	0a5b      	lsrs	r3, r3, #9
 800374a:	4413      	add	r3, r2
 800374c:	4619      	mov	r1, r3
 800374e:	6938      	ldr	r0, [r7, #16]
 8003750:	f7ff fefe 	bl	8003550 <move_window>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d152      	bne.n	8003800 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4413      	add	r3, r2
 8003764:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003768:	021b      	lsls	r3, r3, #8
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	4313      	orrs	r3, r2
 800376e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <get_fat+0xba>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	e002      	b.n	8003786 <get_fat+0xc0>
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003786:	617b      	str	r3, [r7, #20]
			break;
 8003788:	e03f      	b.n	800380a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	6a1a      	ldr	r2, [r3, #32]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	0a1b      	lsrs	r3, r3, #8
 8003792:	4413      	add	r3, r2
 8003794:	4619      	mov	r1, r3
 8003796:	6938      	ldr	r0, [r7, #16]
 8003798:	f7ff feda 	bl	8003550 <move_window>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d130      	bne.n	8003804 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80037b0:	4413      	add	r3, r2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fc1c 	bl	8002ff0 <ld_word>
 80037b8:	4603      	mov	r3, r0
 80037ba:	617b      	str	r3, [r7, #20]
			break;
 80037bc:	e025      	b.n	800380a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	6a1a      	ldr	r2, [r3, #32]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	09db      	lsrs	r3, r3, #7
 80037c6:	4413      	add	r3, r2
 80037c8:	4619      	mov	r1, r3
 80037ca:	6938      	ldr	r0, [r7, #16]
 80037cc:	f7ff fec0 	bl	8003550 <move_window>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d118      	bne.n	8003808 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80037e4:	4413      	add	r3, r2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff fc1a 	bl	8003020 <ld_dword>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80037f2:	617b      	str	r3, [r7, #20]
			break;
 80037f4:	e009      	b.n	800380a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80037f6:	2301      	movs	r3, #1
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	e006      	b.n	800380a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80037fc:	bf00      	nop
 80037fe:	e004      	b.n	800380a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003800:	bf00      	nop
 8003802:	e002      	b.n	800380a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003804:	bf00      	nop
 8003806:	e000      	b.n	800380a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003808:	bf00      	nop
		}
	}

	return val;
 800380a:	697b      	ldr	r3, [r7, #20]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003814:	b590      	push	{r4, r7, lr}
 8003816:	b089      	sub	sp, #36	@ 0x24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003820:	2302      	movs	r3, #2
 8003822:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b01      	cmp	r3, #1
 8003828:	f240 80d9 	bls.w	80039de <put_fat+0x1ca>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	429a      	cmp	r2, r3
 8003834:	f080 80d3 	bcs.w	80039de <put_fat+0x1ca>
		switch (fs->fs_type) {
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b03      	cmp	r3, #3
 800383e:	f000 8096 	beq.w	800396e <put_fat+0x15a>
 8003842:	2b03      	cmp	r3, #3
 8003844:	f300 80cb 	bgt.w	80039de <put_fat+0x1ca>
 8003848:	2b01      	cmp	r3, #1
 800384a:	d002      	beq.n	8003852 <put_fat+0x3e>
 800384c:	2b02      	cmp	r3, #2
 800384e:	d06e      	beq.n	800392e <put_fat+0x11a>
 8003850:	e0c5      	b.n	80039de <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	085b      	lsrs	r3, r3, #1
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4413      	add	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6a1a      	ldr	r2, [r3, #32]
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	0a5b      	lsrs	r3, r3, #9
 8003868:	4413      	add	r3, r2
 800386a:	4619      	mov	r1, r3
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f7ff fe6f 	bl	8003550 <move_window>
 8003872:	4603      	mov	r3, r0
 8003874:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003876:	7ffb      	ldrb	r3, [r7, #31]
 8003878:	2b00      	cmp	r3, #0
 800387a:	f040 80a9 	bne.w	80039d0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	1c59      	adds	r1, r3, #1
 8003888:	61b9      	str	r1, [r7, #24]
 800388a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388e:	4413      	add	r3, r2
 8003890:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00d      	beq.n	80038b8 <put_fat+0xa4>
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	b25b      	sxtb	r3, r3
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	b25a      	sxtb	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	b25b      	sxtb	r3, r3
 80038b0:	4313      	orrs	r3, r2
 80038b2:	b25b      	sxtb	r3, r3
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	e001      	b.n	80038bc <put_fat+0xa8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a1a      	ldr	r2, [r3, #32]
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	0a5b      	lsrs	r3, r3, #9
 80038ce:	4413      	add	r3, r2
 80038d0:	4619      	mov	r1, r3
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f7ff fe3c 	bl	8003550 <move_window>
 80038d8:	4603      	mov	r3, r0
 80038da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80038dc:	7ffb      	ldrb	r3, [r7, #31]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d178      	bne.n	80039d4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ee:	4413      	add	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <put_fat+0xf0>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	091b      	lsrs	r3, r3, #4
 8003900:	b2db      	uxtb	r3, r3
 8003902:	e00e      	b.n	8003922 <put_fat+0x10e>
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	b25b      	sxtb	r3, r3
 800390a:	f023 030f 	bic.w	r3, r3, #15
 800390e:	b25a      	sxtb	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	0a1b      	lsrs	r3, r3, #8
 8003914:	b25b      	sxtb	r3, r3
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	b25b      	sxtb	r3, r3
 800391c:	4313      	orrs	r3, r2
 800391e:	b25b      	sxtb	r3, r3
 8003920:	b2db      	uxtb	r3, r3
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	70da      	strb	r2, [r3, #3]
			break;
 800392c:	e057      	b.n	80039de <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a1a      	ldr	r2, [r3, #32]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	0a1b      	lsrs	r3, r3, #8
 8003936:	4413      	add	r3, r2
 8003938:	4619      	mov	r1, r3
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f7ff fe08 	bl	8003550 <move_window>
 8003940:	4603      	mov	r3, r0
 8003942:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003944:	7ffb      	ldrb	r3, [r7, #31]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d146      	bne.n	80039d8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8003958:	4413      	add	r3, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	b292      	uxth	r2, r2
 800395e:	4611      	mov	r1, r2
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fb80 	bl	8003066 <st_word>
			fs->wflag = 1;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2201      	movs	r2, #1
 800396a:	70da      	strb	r2, [r3, #3]
			break;
 800396c:	e037      	b.n	80039de <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a1a      	ldr	r2, [r3, #32]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	09db      	lsrs	r3, r3, #7
 8003976:	4413      	add	r3, r2
 8003978:	4619      	mov	r1, r3
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f7ff fde8 	bl	8003550 <move_window>
 8003980:	4603      	mov	r3, r0
 8003982:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003984:	7ffb      	ldrb	r3, [r7, #31]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d128      	bne.n	80039dc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800399e:	4413      	add	r3, r2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff fb3d 	bl	8003020 <ld_dword>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80039ac:	4323      	orrs	r3, r4
 80039ae:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80039be:	4413      	add	r3, r2
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff fb6a 	bl	800309c <st_dword>
			fs->wflag = 1;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2201      	movs	r2, #1
 80039cc:	70da      	strb	r2, [r3, #3]
			break;
 80039ce:	e006      	b.n	80039de <put_fat+0x1ca>
			if (res != FR_OK) break;
 80039d0:	bf00      	nop
 80039d2:	e004      	b.n	80039de <put_fat+0x1ca>
			if (res != FR_OK) break;
 80039d4:	bf00      	nop
 80039d6:	e002      	b.n	80039de <put_fat+0x1ca>
			if (res != FR_OK) break;
 80039d8:	bf00      	nop
 80039da:	e000      	b.n	80039de <put_fat+0x1ca>
			if (res != FR_OK) break;
 80039dc:	bf00      	nop
		}
	}
	return res;
 80039de:	7ffb      	ldrb	r3, [r7, #31]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3724      	adds	r7, #36	@ 0x24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd90      	pop	{r4, r7, pc}

080039e8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d904      	bls.n	8003a0e <remove_chain+0x26>
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d301      	bcc.n	8003a12 <remove_chain+0x2a>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e04b      	b.n	8003aaa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00c      	beq.n	8003a32 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003a18:	f04f 32ff 	mov.w	r2, #4294967295
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	69b8      	ldr	r0, [r7, #24]
 8003a20:	f7ff fef8 	bl	8003814 <put_fat>
 8003a24:	4603      	mov	r3, r0
 8003a26:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003a28:	7ffb      	ldrb	r3, [r7, #31]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <remove_chain+0x4a>
 8003a2e:	7ffb      	ldrb	r3, [r7, #31]
 8003a30:	e03b      	b.n	8003aaa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003a32:	68b9      	ldr	r1, [r7, #8]
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f7ff fe46 	bl	80036c6 <get_fat>
 8003a3a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d031      	beq.n	8003aa6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <remove_chain+0x64>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e02e      	b.n	8003aaa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a52:	d101      	bne.n	8003a58 <remove_chain+0x70>
 8003a54:	2301      	movs	r3, #1
 8003a56:	e028      	b.n	8003aaa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003a58:	2200      	movs	r2, #0
 8003a5a:	68b9      	ldr	r1, [r7, #8]
 8003a5c:	69b8      	ldr	r0, [r7, #24]
 8003a5e:	f7ff fed9 	bl	8003814 <put_fat>
 8003a62:	4603      	mov	r3, r0
 8003a64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003a66:	7ffb      	ldrb	r3, [r7, #31]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <remove_chain+0x88>
 8003a6c:	7ffb      	ldrb	r3, [r7, #31]
 8003a6e:	e01c      	b.n	8003aaa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	3b02      	subs	r3, #2
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d20b      	bcs.n	8003a96 <remove_chain+0xae>
			fs->free_clst++;
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	791b      	ldrb	r3, [r3, #4]
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d3c6      	bcc.n	8003a32 <remove_chain+0x4a>
 8003aa4:	e000      	b.n	8003aa8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003aa6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b088      	sub	sp, #32
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10d      	bne.n	8003ae4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <create_chain+0x2c>
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d31b      	bcc.n	8003b16 <create_chain+0x64>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	61bb      	str	r3, [r7, #24]
 8003ae2:	e018      	b.n	8003b16 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003ae4:	6839      	ldr	r1, [r7, #0]
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff fded 	bl	80036c6 <get_fat>
 8003aec:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d801      	bhi.n	8003af8 <create_chain+0x46>
 8003af4:	2301      	movs	r3, #1
 8003af6:	e070      	b.n	8003bda <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afe:	d101      	bne.n	8003b04 <create_chain+0x52>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	e06a      	b.n	8003bda <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d201      	bcs.n	8003b12 <create_chain+0x60>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	e063      	b.n	8003bda <create_chain+0x128>
		scl = clst;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	69fa      	ldr	r2, [r7, #28]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d307      	bcc.n	8003b3a <create_chain+0x88>
				ncl = 2;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d901      	bls.n	8003b3a <create_chain+0x88>
 8003b36:	2300      	movs	r3, #0
 8003b38:	e04f      	b.n	8003bda <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003b3a:	69f9      	ldr	r1, [r7, #28]
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff fdc2 	bl	80036c6 <get_fat>
 8003b42:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00e      	beq.n	8003b68 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d003      	beq.n	8003b58 <create_chain+0xa6>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b56:	d101      	bne.n	8003b5c <create_chain+0xaa>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	e03e      	b.n	8003bda <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003b5c:	69fa      	ldr	r2, [r7, #28]
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d1da      	bne.n	8003b1a <create_chain+0x68>
 8003b64:	2300      	movs	r3, #0
 8003b66:	e038      	b.n	8003bda <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003b68:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b6e:	69f9      	ldr	r1, [r7, #28]
 8003b70:	6938      	ldr	r0, [r7, #16]
 8003b72:	f7ff fe4f 	bl	8003814 <put_fat>
 8003b76:	4603      	mov	r3, r0
 8003b78:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003b7a:	7dfb      	ldrb	r3, [r7, #23]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d109      	bne.n	8003b94 <create_chain+0xe2>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d006      	beq.n	8003b94 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	6839      	ldr	r1, [r7, #0]
 8003b8a:	6938      	ldr	r0, [r7, #16]
 8003b8c:	f7ff fe42 	bl	8003814 <put_fat>
 8003b90:	4603      	mov	r3, r0
 8003b92:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003b94:	7dfb      	ldrb	r3, [r7, #23]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d116      	bne.n	8003bc8 <create_chain+0x116>
		fs->last_clst = ncl;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	3b02      	subs	r3, #2
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d804      	bhi.n	8003bb8 <create_chain+0x106>
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	1e5a      	subs	r2, r3, #1
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	791b      	ldrb	r3, [r3, #4]
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	711a      	strb	r2, [r3, #4]
 8003bc6:	e007      	b.n	8003bd8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003bc8:	7dfb      	ldrb	r3, [r7, #23]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d102      	bne.n	8003bd4 <create_chain+0x122>
 8003bce:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd2:	e000      	b.n	8003bd6 <create_chain+0x124>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003bd8:	69fb      	ldr	r3, [r7, #28]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3720      	adds	r7, #32
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b087      	sub	sp, #28
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	0a5b      	lsrs	r3, r3, #9
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	8952      	ldrh	r2, [r2, #10]
 8003c02:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1d1a      	adds	r2, r3, #4
 8003c0c:	613a      	str	r2, [r7, #16]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <clmt_clust+0x3a>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	e010      	b.n	8003c3e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d307      	bcc.n	8003c34 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003c32:	e7e9      	b.n	8003c08 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8003c34:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	4413      	add	r3, r2
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b086      	sub	sp, #24
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c60:	d204      	bcs.n	8003c6c <dir_sdi+0x22>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	f003 031f 	and.w	r3, r3, #31
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <dir_sdi+0x26>
		return FR_INT_ERR;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e063      	b.n	8003d38 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <dir_sdi+0x46>
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d902      	bls.n	8003c90 <dir_sdi+0x46>
		clst = fs->dirbase;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10c      	bne.n	8003cb0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	8912      	ldrh	r2, [r2, #8]
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d301      	bcc.n	8003ca6 <dir_sdi+0x5c>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e048      	b.n	8003d38 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	61da      	str	r2, [r3, #28]
 8003cae:	e029      	b.n	8003d04 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	895b      	ldrh	r3, [r3, #10]
 8003cb4:	025b      	lsls	r3, r3, #9
 8003cb6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003cb8:	e019      	b.n	8003cee <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6979      	ldr	r1, [r7, #20]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff fd01 	bl	80036c6 <get_fat>
 8003cc4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ccc:	d101      	bne.n	8003cd2 <dir_sdi+0x88>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e032      	b.n	8003d38 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d904      	bls.n	8003ce2 <dir_sdi+0x98>
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d301      	bcc.n	8003ce6 <dir_sdi+0x9c>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e028      	b.n	8003d38 <dir_sdi+0xee>
			ofs -= csz;
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d2e1      	bcs.n	8003cba <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8003cf6:	6979      	ldr	r1, [r7, #20]
 8003cf8:	6938      	ldr	r0, [r7, #16]
 8003cfa:	f7ff fcc5 	bl	8003688 <clust2sect>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <dir_sdi+0xcc>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e010      	b.n	8003d38 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69da      	ldr	r2, [r3, #28]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	0a5b      	lsrs	r3, r3, #9
 8003d1e:	441a      	add	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d30:	441a      	add	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	3320      	adds	r3, #32
 8003d56:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <dir_next+0x28>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d66:	d301      	bcc.n	8003d6c <dir_next+0x2c>
 8003d68:	2304      	movs	r3, #4
 8003d6a:	e0aa      	b.n	8003ec2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f040 8098 	bne.w	8003ea8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10b      	bne.n	8003da2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	8912      	ldrh	r2, [r2, #8]
 8003d92:	4293      	cmp	r3, r2
 8003d94:	f0c0 8088 	bcc.w	8003ea8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	61da      	str	r2, [r3, #28]
 8003d9e:	2304      	movs	r3, #4
 8003da0:	e08f      	b.n	8003ec2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	0a5b      	lsrs	r3, r3, #9
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	8952      	ldrh	r2, [r2, #10]
 8003daa:	3a01      	subs	r2, #1
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d17a      	bne.n	8003ea8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	4619      	mov	r1, r3
 8003dba:	4610      	mov	r0, r2
 8003dbc:	f7ff fc83 	bl	80036c6 <get_fat>
 8003dc0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d801      	bhi.n	8003dcc <dir_next+0x8c>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e07a      	b.n	8003ec2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd2:	d101      	bne.n	8003dd8 <dir_next+0x98>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e074      	b.n	8003ec2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d358      	bcc.n	8003e94 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d104      	bne.n	8003df2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	61da      	str	r2, [r3, #28]
 8003dee:	2304      	movs	r3, #4
 8003df0:	e067      	b.n	8003ec2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	f7ff fe59 	bl	8003ab2 <create_chain>
 8003e00:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <dir_next+0xcc>
 8003e08:	2307      	movs	r3, #7
 8003e0a:	e05a      	b.n	8003ec2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <dir_next+0xd6>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e055      	b.n	8003ec2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1c:	d101      	bne.n	8003e22 <dir_next+0xe2>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e04f      	b.n	8003ec2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f7ff fb50 	bl	80034c8 <sync_window>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <dir_next+0xf2>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e047      	b.n	8003ec2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3330      	adds	r3, #48	@ 0x30
 8003e36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff f97a 	bl	8003136 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003e42:	2300      	movs	r3, #0
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	6979      	ldr	r1, [r7, #20]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f7ff fc1d 	bl	8003688 <clust2sect>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003e54:	e012      	b.n	8003e7c <dir_next+0x13c>
						fs->wflag = 1;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f7ff fb33 	bl	80034c8 <sync_window>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <dir_next+0x12c>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e02a      	b.n	8003ec2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	895b      	ldrh	r3, [r3, #10]
 8003e80:	461a      	mov	r2, r3
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d3e6      	bcc.n	8003e56 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad2      	subs	r2, r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8003e9a:	6979      	ldr	r1, [r7, #20]
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f7ff fbf3 	bl	8003688 <clust2sect>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eba:	441a      	add	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b086      	sub	sp, #24
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003eda:	2100      	movs	r1, #0
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff feb4 	bl	8003c4a <dir_sdi>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003ee6:	7dfb      	ldrb	r3, [r7, #23]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d12b      	bne.n	8003f44 <dir_alloc+0x7a>
		n = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7ff fb2a 	bl	8003550 <move_window>
 8003efc:	4603      	mov	r3, r0
 8003efe:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d11d      	bne.n	8003f42 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2be5      	cmp	r3, #229	@ 0xe5
 8003f0e:	d004      	beq.n	8003f1a <dir_alloc+0x50>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d107      	bne.n	8003f2a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d102      	bne.n	8003f2e <dir_alloc+0x64>
 8003f28:	e00c      	b.n	8003f44 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8003f2e:	2101      	movs	r1, #1
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff ff05 	bl	8003d40 <dir_next>
 8003f36:	4603      	mov	r3, r0
 8003f38:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0d7      	beq.n	8003ef0 <dir_alloc+0x26>
 8003f40:	e000      	b.n	8003f44 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8003f42:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003f44:	7dfb      	ldrb	r3, [r7, #23]
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d101      	bne.n	8003f4e <dir_alloc+0x84>
 8003f4a:	2307      	movs	r3, #7
 8003f4c:	75fb      	strb	r3, [r7, #23]
	return res;
 8003f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	331a      	adds	r3, #26
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff f842 	bl	8002ff0 <ld_word>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d109      	bne.n	8003f8c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	3314      	adds	r3, #20
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff f837 	bl	8002ff0 <ld_word>
 8003f82:	4603      	mov	r3, r0
 8003f84:	041b      	lsls	r3, r3, #16
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	331a      	adds	r3, #26
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	b292      	uxth	r2, r2
 8003faa:	4611      	mov	r1, r2
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff f85a 	bl	8003066 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d109      	bne.n	8003fce <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f103 0214 	add.w	r2, r3, #20
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	0c1b      	lsrs	r3, r3, #16
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4610      	mov	r0, r2
 8003fca:	f7ff f84c 	bl	8003066 <st_word>
	}
}
 8003fce:	bf00      	nop
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b086      	sub	sp, #24
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff fe2f 	bl	8003c4a <dir_sdi>
 8003fec:	4603      	mov	r3, r0
 8003fee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <dir_find+0x24>
 8003ff6:	7dfb      	ldrb	r3, [r7, #23]
 8003ff8:	e03e      	b.n	8004078 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	4619      	mov	r1, r3
 8004000:	6938      	ldr	r0, [r7, #16]
 8004002:	f7ff faa5 	bl	8003550 <move_window>
 8004006:	4603      	mov	r3, r0
 8004008:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800400a:	7dfb      	ldrb	r3, [r7, #23]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d12f      	bne.n	8004070 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d102      	bne.n	8004024 <dir_find+0x4e>
 800401e:	2304      	movs	r3, #4
 8004020:	75fb      	strb	r3, [r7, #23]
 8004022:	e028      	b.n	8004076 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	330b      	adds	r3, #11
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004030:	b2da      	uxtb	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	330b      	adds	r3, #11
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10a      	bne.n	800405c <dir_find+0x86>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a18      	ldr	r0, [r3, #32]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3324      	adds	r3, #36	@ 0x24
 800404e:	220b      	movs	r2, #11
 8004050:	4619      	mov	r1, r3
 8004052:	f7ff f88b 	bl	800316c <mem_cmp>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00b      	beq.n	8004074 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800405c:	2100      	movs	r1, #0
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff fe6e 	bl	8003d40 <dir_next>
 8004064:	4603      	mov	r3, r0
 8004066:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004068:	7dfb      	ldrb	r3, [r7, #23]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0c5      	beq.n	8003ffa <dir_find+0x24>
 800406e:	e002      	b.n	8004076 <dir_find+0xa0>
		if (res != FR_OK) break;
 8004070:	bf00      	nop
 8004072:	e000      	b.n	8004076 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004074:	bf00      	nop

	return res;
 8004076:	7dfb      	ldrb	r3, [r7, #23]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800408e:	2101      	movs	r1, #1
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff ff1a 	bl	8003eca <dir_alloc>
 8004096:	4603      	mov	r3, r0
 8004098:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800409a:	7bfb      	ldrb	r3, [r7, #15]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d11c      	bne.n	80040da <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	4619      	mov	r1, r3
 80040a6:	68b8      	ldr	r0, [r7, #8]
 80040a8:	f7ff fa52 	bl	8003550 <move_window>
 80040ac:	4603      	mov	r3, r0
 80040ae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d111      	bne.n	80040da <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	2220      	movs	r2, #32
 80040bc:	2100      	movs	r1, #0
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff f839 	bl	8003136 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a18      	ldr	r0, [r3, #32]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3324      	adds	r3, #36	@ 0x24
 80040cc:	220b      	movs	r2, #11
 80040ce:	4619      	mov	r1, r3
 80040d0:	f7ff f810 	bl	80030f4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2201      	movs	r2, #1
 80040d8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80040da:	7bfb      	ldrb	r3, [r7, #15]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3324      	adds	r3, #36	@ 0x24
 80040f8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80040fa:	220b      	movs	r2, #11
 80040fc:	2120      	movs	r1, #32
 80040fe:	68b8      	ldr	r0, [r7, #8]
 8004100:	f7ff f819 	bl	8003136 <mem_set>
	si = i = 0; ni = 8;
 8004104:	2300      	movs	r3, #0
 8004106:	613b      	str	r3, [r7, #16]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	61fb      	str	r3, [r7, #28]
 800410c:	2308      	movs	r3, #8
 800410e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	61fa      	str	r2, [r7, #28]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4413      	add	r3, r2
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800411e:	7efb      	ldrb	r3, [r7, #27]
 8004120:	2b20      	cmp	r3, #32
 8004122:	d94e      	bls.n	80041c2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004124:	7efb      	ldrb	r3, [r7, #27]
 8004126:	2b2f      	cmp	r3, #47	@ 0x2f
 8004128:	d006      	beq.n	8004138 <create_name+0x54>
 800412a:	7efb      	ldrb	r3, [r7, #27]
 800412c:	2b5c      	cmp	r3, #92	@ 0x5c
 800412e:	d110      	bne.n	8004152 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004130:	e002      	b.n	8004138 <create_name+0x54>
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3301      	adds	r3, #1
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	4413      	add	r3, r2
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b2f      	cmp	r3, #47	@ 0x2f
 8004142:	d0f6      	beq.n	8004132 <create_name+0x4e>
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4413      	add	r3, r2
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b5c      	cmp	r3, #92	@ 0x5c
 800414e:	d0f0      	beq.n	8004132 <create_name+0x4e>
			break;
 8004150:	e038      	b.n	80041c4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004152:	7efb      	ldrb	r3, [r7, #27]
 8004154:	2b2e      	cmp	r3, #46	@ 0x2e
 8004156:	d003      	beq.n	8004160 <create_name+0x7c>
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	429a      	cmp	r2, r3
 800415e:	d30c      	bcc.n	800417a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2b0b      	cmp	r3, #11
 8004164:	d002      	beq.n	800416c <create_name+0x88>
 8004166:	7efb      	ldrb	r3, [r7, #27]
 8004168:	2b2e      	cmp	r3, #46	@ 0x2e
 800416a:	d001      	beq.n	8004170 <create_name+0x8c>
 800416c:	2306      	movs	r3, #6
 800416e:	e044      	b.n	80041fa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004170:	2308      	movs	r3, #8
 8004172:	613b      	str	r3, [r7, #16]
 8004174:	230b      	movs	r3, #11
 8004176:	617b      	str	r3, [r7, #20]
			continue;
 8004178:	e022      	b.n	80041c0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800417a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800417e:	2b00      	cmp	r3, #0
 8004180:	da04      	bge.n	800418c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004182:	7efb      	ldrb	r3, [r7, #27]
 8004184:	3b80      	subs	r3, #128	@ 0x80
 8004186:	4a1f      	ldr	r2, [pc, #124]	@ (8004204 <create_name+0x120>)
 8004188:	5cd3      	ldrb	r3, [r2, r3]
 800418a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800418c:	7efb      	ldrb	r3, [r7, #27]
 800418e:	4619      	mov	r1, r3
 8004190:	481d      	ldr	r0, [pc, #116]	@ (8004208 <create_name+0x124>)
 8004192:	f7ff f812 	bl	80031ba <chk_chr>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <create_name+0xbc>
 800419c:	2306      	movs	r3, #6
 800419e:	e02c      	b.n	80041fa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80041a0:	7efb      	ldrb	r3, [r7, #27]
 80041a2:	2b60      	cmp	r3, #96	@ 0x60
 80041a4:	d905      	bls.n	80041b2 <create_name+0xce>
 80041a6:	7efb      	ldrb	r3, [r7, #27]
 80041a8:	2b7a      	cmp	r3, #122	@ 0x7a
 80041aa:	d802      	bhi.n	80041b2 <create_name+0xce>
 80041ac:	7efb      	ldrb	r3, [r7, #27]
 80041ae:	3b20      	subs	r3, #32
 80041b0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	613a      	str	r2, [r7, #16]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	4413      	add	r3, r2
 80041bc:	7efa      	ldrb	r2, [r7, #27]
 80041be:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80041c0:	e7a6      	b.n	8004110 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80041c2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	441a      	add	r2, r3
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <create_name+0xf4>
 80041d4:	2306      	movs	r3, #6
 80041d6:	e010      	b.n	80041fa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2be5      	cmp	r3, #229	@ 0xe5
 80041de:	d102      	bne.n	80041e6 <create_name+0x102>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2205      	movs	r2, #5
 80041e4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80041e6:	7efb      	ldrb	r3, [r7, #27]
 80041e8:	2b20      	cmp	r3, #32
 80041ea:	d801      	bhi.n	80041f0 <create_name+0x10c>
 80041ec:	2204      	movs	r2, #4
 80041ee:	e000      	b.n	80041f2 <create_name+0x10e>
 80041f0:	2200      	movs	r2, #0
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	330b      	adds	r3, #11
 80041f6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80041f8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3720      	adds	r7, #32
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	08005570 	.word	0x08005570
 8004208:	0800551c 	.word	0x0800551c

0800420c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004220:	e002      	b.n	8004228 <follow_path+0x1c>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	3301      	adds	r3, #1
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b2f      	cmp	r3, #47	@ 0x2f
 800422e:	d0f8      	beq.n	8004222 <follow_path+0x16>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b5c      	cmp	r3, #92	@ 0x5c
 8004236:	d0f4      	beq.n	8004222 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2200      	movs	r2, #0
 800423c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b1f      	cmp	r3, #31
 8004244:	d80a      	bhi.n	800425c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2280      	movs	r2, #128	@ 0x80
 800424a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800424e:	2100      	movs	r1, #0
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff fcfa 	bl	8003c4a <dir_sdi>
 8004256:	4603      	mov	r3, r0
 8004258:	75fb      	strb	r3, [r7, #23]
 800425a:	e043      	b.n	80042e4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800425c:	463b      	mov	r3, r7
 800425e:	4619      	mov	r1, r3
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff ff3f 	bl	80040e4 <create_name>
 8004266:	4603      	mov	r3, r0
 8004268:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800426a:	7dfb      	ldrb	r3, [r7, #23]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d134      	bne.n	80042da <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff feb0 	bl	8003fd6 <dir_find>
 8004276:	4603      	mov	r3, r0
 8004278:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004280:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004282:	7dfb      	ldrb	r3, [r7, #23]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004288:	7dfb      	ldrb	r3, [r7, #23]
 800428a:	2b04      	cmp	r3, #4
 800428c:	d127      	bne.n	80042de <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800428e:	7afb      	ldrb	r3, [r7, #11]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d122      	bne.n	80042de <follow_path+0xd2>
 8004298:	2305      	movs	r3, #5
 800429a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800429c:	e01f      	b.n	80042de <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800429e:	7afb      	ldrb	r3, [r7, #11]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d11c      	bne.n	80042e2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	799b      	ldrb	r3, [r3, #6]
 80042ac:	f003 0310 	and.w	r3, r3, #16
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d102      	bne.n	80042ba <follow_path+0xae>
				res = FR_NO_PATH; break;
 80042b4:	2305      	movs	r3, #5
 80042b6:	75fb      	strb	r3, [r7, #23]
 80042b8:	e014      	b.n	80042e4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c8:	4413      	add	r3, r2
 80042ca:	4619      	mov	r1, r3
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f7ff fe43 	bl	8003f58 <ld_clust>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80042d8:	e7c0      	b.n	800425c <follow_path+0x50>
			if (res != FR_OK) break;
 80042da:	bf00      	nop
 80042dc:	e002      	b.n	80042e4 <follow_path+0xd8>
				break;
 80042de:	bf00      	nop
 80042e0:	e000      	b.n	80042e4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80042e2:	bf00      	nop
			}
		}
	}

	return res;
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b087      	sub	sp, #28
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80042f6:	f04f 33ff 	mov.w	r3, #4294967295
 80042fa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d031      	beq.n	8004368 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	e002      	b.n	8004312 <get_ldnumber+0x24>
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	3301      	adds	r3, #1
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b20      	cmp	r3, #32
 8004318:	d903      	bls.n	8004322 <get_ldnumber+0x34>
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b3a      	cmp	r3, #58	@ 0x3a
 8004320:	d1f4      	bne.n	800430c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b3a      	cmp	r3, #58	@ 0x3a
 8004328:	d11c      	bne.n	8004364 <get_ldnumber+0x76>
			tp = *path;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	60fa      	str	r2, [r7, #12]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	3b30      	subs	r3, #48	@ 0x30
 800433a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b09      	cmp	r3, #9
 8004340:	d80e      	bhi.n	8004360 <get_ldnumber+0x72>
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	429a      	cmp	r2, r3
 8004348:	d10a      	bne.n	8004360 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d107      	bne.n	8004360 <get_ldnumber+0x72>
					vol = (int)i;
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	3301      	adds	r3, #1
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	e002      	b.n	800436a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004364:	2300      	movs	r3, #0
 8004366:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004368:	693b      	ldr	r3, [r7, #16]
}
 800436a:	4618      	mov	r0, r3
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	70da      	strb	r2, [r3, #3]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f04f 32ff 	mov.w	r2, #4294967295
 800438e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004390:	6839      	ldr	r1, [r7, #0]
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff f8dc 	bl	8003550 <move_window>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <check_fs+0x2a>
 800439e:	2304      	movs	r3, #4
 80043a0:	e038      	b.n	8004414 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3330      	adds	r3, #48	@ 0x30
 80043a6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fe fe20 	bl	8002ff0 <ld_word>
 80043b0:	4603      	mov	r3, r0
 80043b2:	461a      	mov	r2, r3
 80043b4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d001      	beq.n	80043c0 <check_fs+0x48>
 80043bc:	2303      	movs	r3, #3
 80043be:	e029      	b.n	8004414 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80043c6:	2be9      	cmp	r3, #233	@ 0xe9
 80043c8:	d009      	beq.n	80043de <check_fs+0x66>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80043d0:	2beb      	cmp	r3, #235	@ 0xeb
 80043d2:	d11e      	bne.n	8004412 <check_fs+0x9a>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80043da:	2b90      	cmp	r3, #144	@ 0x90
 80043dc:	d119      	bne.n	8004412 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3330      	adds	r3, #48	@ 0x30
 80043e2:	3336      	adds	r3, #54	@ 0x36
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fe fe1b 	bl	8003020 <ld_dword>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80043f0:	4a0a      	ldr	r2, [pc, #40]	@ (800441c <check_fs+0xa4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d101      	bne.n	80043fa <check_fs+0x82>
 80043f6:	2300      	movs	r3, #0
 80043f8:	e00c      	b.n	8004414 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3330      	adds	r3, #48	@ 0x30
 80043fe:	3352      	adds	r3, #82	@ 0x52
 8004400:	4618      	mov	r0, r3
 8004402:	f7fe fe0d 	bl	8003020 <ld_dword>
 8004406:	4603      	mov	r3, r0
 8004408:	4a05      	ldr	r2, [pc, #20]	@ (8004420 <check_fs+0xa8>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d101      	bne.n	8004412 <check_fs+0x9a>
 800440e:	2300      	movs	r3, #0
 8004410:	e000      	b.n	8004414 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004412:	2302      	movs	r3, #2
}
 8004414:	4618      	mov	r0, r3
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	00544146 	.word	0x00544146
 8004420:	33544146 	.word	0x33544146

08004424 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b096      	sub	sp, #88	@ 0x58
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	4613      	mov	r3, r2
 8004430:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f7ff ff58 	bl	80042ee <get_ldnumber>
 800443e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004442:	2b00      	cmp	r3, #0
 8004444:	da01      	bge.n	800444a <find_volume+0x26>
 8004446:	230b      	movs	r3, #11
 8004448:	e22d      	b.n	80048a6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800444a:	4aa1      	ldr	r2, [pc, #644]	@ (80046d0 <find_volume+0x2ac>)
 800444c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800444e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004452:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <find_volume+0x3a>
 800445a:	230c      	movs	r3, #12
 800445c:	e223      	b.n	80048a6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004462:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	f023 0301 	bic.w	r3, r3, #1
 800446a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800446c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01a      	beq.n	80044aa <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004476:	785b      	ldrb	r3, [r3, #1]
 8004478:	4618      	mov	r0, r3
 800447a:	f7fe fd19 	bl	8002eb0 <disk_status>
 800447e:	4603      	mov	r3, r0
 8004480:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004484:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10c      	bne.n	80044aa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <find_volume+0x82>
 8004496:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80044a2:	230a      	movs	r3, #10
 80044a4:	e1ff      	b.n	80048a6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80044a6:	2300      	movs	r3, #0
 80044a8:	e1fd      	b.n	80048a6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80044aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ac:	2200      	movs	r2, #0
 80044ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80044b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80044b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ba:	785b      	ldrb	r3, [r3, #1]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fe fd11 	bl	8002ee4 <disk_initialize>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80044c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80044d4:	2303      	movs	r3, #3
 80044d6:	e1e6      	b.n	80048a6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80044d8:	79fb      	ldrb	r3, [r7, #7]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d007      	beq.n	80044ee <find_volume+0xca>
 80044de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80044ea:	230a      	movs	r3, #10
 80044ec:	e1db      	b.n	80048a6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80044f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80044f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80044f6:	f7ff ff3f 	bl	8004378 <check_fs>
 80044fa:	4603      	mov	r3, r0
 80044fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004500:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004504:	2b02      	cmp	r3, #2
 8004506:	d149      	bne.n	800459c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004508:	2300      	movs	r3, #0
 800450a:	643b      	str	r3, [r7, #64]	@ 0x40
 800450c:	e01e      	b.n	800454c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800450e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004510:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800451c:	4413      	add	r3, r2
 800451e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004522:	3304      	adds	r3, #4
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d006      	beq.n	8004538 <find_volume+0x114>
 800452a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452c:	3308      	adds	r3, #8
 800452e:	4618      	mov	r0, r3
 8004530:	f7fe fd76 	bl	8003020 <ld_dword>
 8004534:	4602      	mov	r2, r0
 8004536:	e000      	b.n	800453a <find_volume+0x116>
 8004538:	2200      	movs	r2, #0
 800453a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	3358      	adds	r3, #88	@ 0x58
 8004540:	443b      	add	r3, r7
 8004542:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004548:	3301      	adds	r3, #1
 800454a:	643b      	str	r3, [r7, #64]	@ 0x40
 800454c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800454e:	2b03      	cmp	r3, #3
 8004550:	d9dd      	bls.n	800450e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004552:	2300      	movs	r3, #0
 8004554:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8004556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <find_volume+0x13e>
 800455c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800455e:	3b01      	subs	r3, #1
 8004560:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	3358      	adds	r3, #88	@ 0x58
 8004568:	443b      	add	r3, r7
 800456a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800456e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004570:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004572:	2b00      	cmp	r3, #0
 8004574:	d005      	beq.n	8004582 <find_volume+0x15e>
 8004576:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004578:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800457a:	f7ff fefd 	bl	8004378 <check_fs>
 800457e:	4603      	mov	r3, r0
 8004580:	e000      	b.n	8004584 <find_volume+0x160>
 8004582:	2303      	movs	r3, #3
 8004584:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004588:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800458c:	2b01      	cmp	r3, #1
 800458e:	d905      	bls.n	800459c <find_volume+0x178>
 8004590:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004592:	3301      	adds	r3, #1
 8004594:	643b      	str	r3, [r7, #64]	@ 0x40
 8004596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004598:	2b03      	cmp	r3, #3
 800459a:	d9e2      	bls.n	8004562 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800459c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d101      	bne.n	80045a8 <find_volume+0x184>
 80045a4:	2301      	movs	r3, #1
 80045a6:	e17e      	b.n	80048a6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80045a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d901      	bls.n	80045b4 <find_volume+0x190>
 80045b0:	230d      	movs	r3, #13
 80045b2:	e178      	b.n	80048a6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80045b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b6:	3330      	adds	r3, #48	@ 0x30
 80045b8:	330b      	adds	r3, #11
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe fd18 	bl	8002ff0 <ld_word>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045c6:	d001      	beq.n	80045cc <find_volume+0x1a8>
 80045c8:	230d      	movs	r3, #13
 80045ca:	e16c      	b.n	80048a6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80045cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ce:	3330      	adds	r3, #48	@ 0x30
 80045d0:	3316      	adds	r3, #22
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fe fd0c 	bl	8002ff0 <ld_word>
 80045d8:	4603      	mov	r3, r0
 80045da:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80045dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <find_volume+0x1cc>
 80045e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e4:	3330      	adds	r3, #48	@ 0x30
 80045e6:	3324      	adds	r3, #36	@ 0x24
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fe fd19 	bl	8003020 <ld_dword>
 80045ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80045f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045f4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80045f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80045fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004602:	789b      	ldrb	r3, [r3, #2]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d005      	beq.n	8004614 <find_volume+0x1f0>
 8004608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800460a:	789b      	ldrb	r3, [r3, #2]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d001      	beq.n	8004614 <find_volume+0x1f0>
 8004610:	230d      	movs	r3, #13
 8004612:	e148      	b.n	80048a6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004616:	789b      	ldrb	r3, [r3, #2]
 8004618:	461a      	mov	r2, r3
 800461a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800461c:	fb02 f303 	mul.w	r3, r2, r3
 8004620:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004628:	461a      	mov	r2, r3
 800462a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800462e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004630:	895b      	ldrh	r3, [r3, #10]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <find_volume+0x224>
 8004636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004638:	895b      	ldrh	r3, [r3, #10]
 800463a:	461a      	mov	r2, r3
 800463c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800463e:	895b      	ldrh	r3, [r3, #10]
 8004640:	3b01      	subs	r3, #1
 8004642:	4013      	ands	r3, r2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <find_volume+0x228>
 8004648:	230d      	movs	r3, #13
 800464a:	e12c      	b.n	80048a6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800464c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464e:	3330      	adds	r3, #48	@ 0x30
 8004650:	3311      	adds	r3, #17
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe fccc 	bl	8002ff0 <ld_word>
 8004658:	4603      	mov	r3, r0
 800465a:	461a      	mov	r2, r3
 800465c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004662:	891b      	ldrh	r3, [r3, #8]
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <find_volume+0x24e>
 800466e:	230d      	movs	r3, #13
 8004670:	e119      	b.n	80048a6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004674:	3330      	adds	r3, #48	@ 0x30
 8004676:	3313      	adds	r3, #19
 8004678:	4618      	mov	r0, r3
 800467a:	f7fe fcb9 	bl	8002ff0 <ld_word>
 800467e:	4603      	mov	r3, r0
 8004680:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004682:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004684:	2b00      	cmp	r3, #0
 8004686:	d106      	bne.n	8004696 <find_volume+0x272>
 8004688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468a:	3330      	adds	r3, #48	@ 0x30
 800468c:	3320      	adds	r3, #32
 800468e:	4618      	mov	r0, r3
 8004690:	f7fe fcc6 	bl	8003020 <ld_dword>
 8004694:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004698:	3330      	adds	r3, #48	@ 0x30
 800469a:	330e      	adds	r3, #14
 800469c:	4618      	mov	r0, r3
 800469e:	f7fe fca7 	bl	8002ff0 <ld_word>
 80046a2:	4603      	mov	r3, r0
 80046a4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80046a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <find_volume+0x28c>
 80046ac:	230d      	movs	r3, #13
 80046ae:	e0fa      	b.n	80048a6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80046b0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80046b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046b4:	4413      	add	r3, r2
 80046b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80046b8:	8912      	ldrh	r2, [r2, #8]
 80046ba:	0912      	lsrs	r2, r2, #4
 80046bc:	b292      	uxth	r2, r2
 80046be:	4413      	add	r3, r2
 80046c0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80046c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d204      	bcs.n	80046d4 <find_volume+0x2b0>
 80046ca:	230d      	movs	r3, #13
 80046cc:	e0eb      	b.n	80048a6 <find_volume+0x482>
 80046ce:	bf00      	nop
 80046d0:	200000b0 	.word	0x200000b0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80046d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80046dc:	8952      	ldrh	r2, [r2, #10]
 80046de:	fbb3 f3f2 	udiv	r3, r3, r2
 80046e2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80046e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <find_volume+0x2ca>
 80046ea:	230d      	movs	r3, #13
 80046ec:	e0db      	b.n	80048a6 <find_volume+0x482>
		fmt = FS_FAT32;
 80046ee:	2303      	movs	r3, #3
 80046f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d802      	bhi.n	8004704 <find_volume+0x2e0>
 80046fe:	2302      	movs	r3, #2
 8004700:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004706:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800470a:	4293      	cmp	r3, r2
 800470c:	d802      	bhi.n	8004714 <find_volume+0x2f0>
 800470e:	2301      	movs	r3, #1
 8004710:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004716:	1c9a      	adds	r2, r3, #2
 8004718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800471a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800471c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800471e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004720:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004722:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004724:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004726:	441a      	add	r2, r3
 8004728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800472a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800472c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800472e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004730:	441a      	add	r2, r3
 8004732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004734:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8004736:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800473a:	2b03      	cmp	r3, #3
 800473c:	d11e      	bne.n	800477c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800473e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004740:	3330      	adds	r3, #48	@ 0x30
 8004742:	332a      	adds	r3, #42	@ 0x2a
 8004744:	4618      	mov	r0, r3
 8004746:	f7fe fc53 	bl	8002ff0 <ld_word>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <find_volume+0x330>
 8004750:	230d      	movs	r3, #13
 8004752:	e0a8      	b.n	80048a6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004756:	891b      	ldrh	r3, [r3, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <find_volume+0x33c>
 800475c:	230d      	movs	r3, #13
 800475e:	e0a2      	b.n	80048a6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004762:	3330      	adds	r3, #48	@ 0x30
 8004764:	332c      	adds	r3, #44	@ 0x2c
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe fc5a 	bl	8003020 <ld_dword>
 800476c:	4602      	mov	r2, r0
 800476e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004770:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	647b      	str	r3, [r7, #68]	@ 0x44
 800477a:	e01f      	b.n	80047bc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800477c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800477e:	891b      	ldrh	r3, [r3, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <find_volume+0x364>
 8004784:	230d      	movs	r3, #13
 8004786:	e08e      	b.n	80048a6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800478a:	6a1a      	ldr	r2, [r3, #32]
 800478c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800478e:	441a      	add	r2, r3
 8004790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004792:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004794:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004798:	2b02      	cmp	r3, #2
 800479a:	d103      	bne.n	80047a4 <find_volume+0x380>
 800479c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	e00a      	b.n	80047ba <find_volume+0x396>
 80047a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a6:	695a      	ldr	r2, [r3, #20]
 80047a8:	4613      	mov	r3, r2
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	4413      	add	r3, r2
 80047ae:	085a      	lsrs	r2, r3, #1
 80047b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80047ba:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80047bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047be:	699a      	ldr	r2, [r3, #24]
 80047c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047c2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80047c6:	0a5b      	lsrs	r3, r3, #9
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d201      	bcs.n	80047d0 <find_volume+0x3ac>
 80047cc:	230d      	movs	r3, #13
 80047ce:	e06a      	b.n	80048a6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80047d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d2:	f04f 32ff 	mov.w	r2, #4294967295
 80047d6:	611a      	str	r2, [r3, #16]
 80047d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047de:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80047e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e2:	2280      	movs	r2, #128	@ 0x80
 80047e4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80047e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d149      	bne.n	8004882 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80047ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f0:	3330      	adds	r3, #48	@ 0x30
 80047f2:	3330      	adds	r3, #48	@ 0x30
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fe fbfb 	bl	8002ff0 <ld_word>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d140      	bne.n	8004882 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004800:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004802:	3301      	adds	r3, #1
 8004804:	4619      	mov	r1, r3
 8004806:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004808:	f7fe fea2 	bl	8003550 <move_window>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d137      	bne.n	8004882 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8004812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004814:	2200      	movs	r2, #0
 8004816:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481a:	3330      	adds	r3, #48	@ 0x30
 800481c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004820:	4618      	mov	r0, r3
 8004822:	f7fe fbe5 	bl	8002ff0 <ld_word>
 8004826:	4603      	mov	r3, r0
 8004828:	461a      	mov	r2, r3
 800482a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800482e:	429a      	cmp	r2, r3
 8004830:	d127      	bne.n	8004882 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004834:	3330      	adds	r3, #48	@ 0x30
 8004836:	4618      	mov	r0, r3
 8004838:	f7fe fbf2 	bl	8003020 <ld_dword>
 800483c:	4603      	mov	r3, r0
 800483e:	4a1c      	ldr	r2, [pc, #112]	@ (80048b0 <find_volume+0x48c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d11e      	bne.n	8004882 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004846:	3330      	adds	r3, #48	@ 0x30
 8004848:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800484c:	4618      	mov	r0, r3
 800484e:	f7fe fbe7 	bl	8003020 <ld_dword>
 8004852:	4603      	mov	r3, r0
 8004854:	4a17      	ldr	r2, [pc, #92]	@ (80048b4 <find_volume+0x490>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d113      	bne.n	8004882 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800485a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485c:	3330      	adds	r3, #48	@ 0x30
 800485e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004862:	4618      	mov	r0, r3
 8004864:	f7fe fbdc 	bl	8003020 <ld_dword>
 8004868:	4602      	mov	r2, r0
 800486a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800486c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800486e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004870:	3330      	adds	r3, #48	@ 0x30
 8004872:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004876:	4618      	mov	r0, r3
 8004878:	f7fe fbd2 	bl	8003020 <ld_dword>
 800487c:	4602      	mov	r2, r0
 800487e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004880:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004884:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004888:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800488a:	4b0b      	ldr	r3, [pc, #44]	@ (80048b8 <find_volume+0x494>)
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	3301      	adds	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	4b09      	ldr	r3, [pc, #36]	@ (80048b8 <find_volume+0x494>)
 8004894:	801a      	strh	r2, [r3, #0]
 8004896:	4b08      	ldr	r3, [pc, #32]	@ (80048b8 <find_volume+0x494>)
 8004898:	881a      	ldrh	r2, [r3, #0]
 800489a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800489c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800489e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80048a0:	f7fe fdee 	bl	8003480 <clear_lock>
#endif
	return FR_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3758      	adds	r7, #88	@ 0x58
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	41615252 	.word	0x41615252
 80048b4:	61417272 	.word	0x61417272
 80048b8:	200000b4 	.word	0x200000b4

080048bc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80048c6:	2309      	movs	r3, #9
 80048c8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d01c      	beq.n	800490a <validate+0x4e>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d018      	beq.n	800490a <validate+0x4e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d013      	beq.n	800490a <validate+0x4e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	889a      	ldrh	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	88db      	ldrh	r3, [r3, #6]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d10c      	bne.n	800490a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	785b      	ldrb	r3, [r3, #1]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fe fada 	bl	8002eb0 <disk_status>
 80048fc:	4603      	mov	r3, r0
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <validate+0x4e>
			res = FR_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d102      	bne.n	8004916 <validate+0x5a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	e000      	b.n	8004918 <validate+0x5c>
 8004916:	2300      	movs	r3, #0
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	6013      	str	r3, [r2, #0]
	return res;
 800491c:	7bfb      	ldrb	r3, [r7, #15]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	4613      	mov	r3, r2
 8004934:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800493a:	f107 0310 	add.w	r3, r7, #16
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff fcd5 	bl	80042ee <get_ldnumber>
 8004944:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	2b00      	cmp	r3, #0
 800494a:	da01      	bge.n	8004950 <f_mount+0x28>
 800494c:	230b      	movs	r3, #11
 800494e:	e02b      	b.n	80049a8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004950:	4a17      	ldr	r2, [pc, #92]	@ (80049b0 <f_mount+0x88>)
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004958:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004960:	69b8      	ldr	r0, [r7, #24]
 8004962:	f7fe fd8d 	bl	8003480 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	2200      	movs	r2, #0
 800496a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	490d      	ldr	r1, [pc, #52]	@ (80049b0 <f_mount+0x88>)
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <f_mount+0x66>
 8004988:	79fb      	ldrb	r3, [r7, #7]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d001      	beq.n	8004992 <f_mount+0x6a>
 800498e:	2300      	movs	r3, #0
 8004990:	e00a      	b.n	80049a8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004992:	f107 010c 	add.w	r1, r7, #12
 8004996:	f107 0308 	add.w	r3, r7, #8
 800499a:	2200      	movs	r2, #0
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff fd41 	bl	8004424 <find_volume>
 80049a2:	4603      	mov	r3, r0
 80049a4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80049a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3720      	adds	r7, #32
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	200000b0 	.word	0x200000b0

080049b4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b098      	sub	sp, #96	@ 0x60
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	4613      	mov	r3, r2
 80049c0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <f_open+0x18>
 80049c8:	2309      	movs	r3, #9
 80049ca:	e1a9      	b.n	8004d20 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049d2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80049d4:	79fa      	ldrb	r2, [r7, #7]
 80049d6:	f107 0110 	add.w	r1, r7, #16
 80049da:	f107 0308 	add.w	r3, r7, #8
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff fd20 	bl	8004424 <find_volume>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80049ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f040 818d 	bne.w	8004d0e <f_open+0x35a>
		dj.obj.fs = fs;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	f107 0314 	add.w	r3, r7, #20
 80049fe:	4611      	mov	r1, r2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7ff fc03 	bl	800420c <follow_path>
 8004a06:	4603      	mov	r3, r0
 8004a08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004a0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d118      	bne.n	8004a46 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004a14:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004a18:	b25b      	sxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	da03      	bge.n	8004a26 <f_open+0x72>
				res = FR_INVALID_NAME;
 8004a1e:	2306      	movs	r3, #6
 8004a20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004a24:	e00f      	b.n	8004a46 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	bf8c      	ite	hi
 8004a2c:	2301      	movhi	r3, #1
 8004a2e:	2300      	movls	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	461a      	mov	r2, r3
 8004a34:	f107 0314 	add.w	r3, r7, #20
 8004a38:	4611      	mov	r1, r2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fe fbd8 	bl	80031f0 <chk_lock>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	f003 031c 	and.w	r3, r3, #28
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d07f      	beq.n	8004b50 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8004a50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d017      	beq.n	8004a88 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004a58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d10e      	bne.n	8004a7e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004a60:	f7fe fc22 	bl	80032a8 <enq_lock>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d006      	beq.n	8004a78 <f_open+0xc4>
 8004a6a:	f107 0314 	add.w	r3, r7, #20
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff fb06 	bl	8004080 <dir_register>
 8004a74:	4603      	mov	r3, r0
 8004a76:	e000      	b.n	8004a7a <f_open+0xc6>
 8004a78:	2312      	movs	r3, #18
 8004a7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004a7e:	79fb      	ldrb	r3, [r7, #7]
 8004a80:	f043 0308 	orr.w	r3, r3, #8
 8004a84:	71fb      	strb	r3, [r7, #7]
 8004a86:	e010      	b.n	8004aaa <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004a88:	7ebb      	ldrb	r3, [r7, #26]
 8004a8a:	f003 0311 	and.w	r3, r3, #17
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <f_open+0xe6>
					res = FR_DENIED;
 8004a92:	2307      	movs	r3, #7
 8004a94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004a98:	e007      	b.n	8004aaa <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <f_open+0xf6>
 8004aa4:	2308      	movs	r3, #8
 8004aa6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004aaa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d168      	bne.n	8004b84 <f_open+0x1d0>
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d063      	beq.n	8004b84 <f_open+0x1d0>
				dw = GET_FATTIME();
 8004abc:	f7fd fcc0 	bl	8002440 <get_fattime>
 8004ac0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac4:	330e      	adds	r3, #14
 8004ac6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fe fae7 	bl	800309c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ad0:	3316      	adds	r3, #22
 8004ad2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fe fae1 	bl	800309c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004adc:	330b      	adds	r3, #11
 8004ade:	2220      	movs	r2, #32
 8004ae0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff fa35 	bl	8003f58 <ld_clust>
 8004aee:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004af4:	2200      	movs	r2, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff fa4d 	bl	8003f96 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004afe:	331c      	adds	r3, #28
 8004b00:	2100      	movs	r1, #0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fe faca 	bl	800309c <st_dword>
					fs->wflag = 1;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004b0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d037      	beq.n	8004b84 <f_open+0x1d0>
						dw = fs->winsect;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b18:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8004b1a:	f107 0314 	add.w	r3, r7, #20
 8004b1e:	2200      	movs	r2, #0
 8004b20:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fe ff60 	bl	80039e8 <remove_chain>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8004b2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d126      	bne.n	8004b84 <f_open+0x1d0>
							res = move_window(fs, dw);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe fd08 	bl	8003550 <move_window>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b4a:	3a01      	subs	r2, #1
 8004b4c:	60da      	str	r2, [r3, #12]
 8004b4e:	e019      	b.n	8004b84 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004b50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d115      	bne.n	8004b84 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004b58:	7ebb      	ldrb	r3, [r7, #26]
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <f_open+0x1b6>
					res = FR_NO_FILE;
 8004b62:	2304      	movs	r3, #4
 8004b64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004b68:	e00c      	b.n	8004b84 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d007      	beq.n	8004b84 <f_open+0x1d0>
 8004b74:	7ebb      	ldrb	r3, [r7, #26]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <f_open+0x1d0>
						res = FR_DENIED;
 8004b7e:	2307      	movs	r3, #7
 8004b80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8004b84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d126      	bne.n	8004bda <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8004b96:	79fb      	ldrb	r3, [r7, #7]
 8004b98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b9c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8004ba6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004bac:	79fb      	ldrb	r3, [r7, #7]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	bf8c      	ite	hi
 8004bb2:	2301      	movhi	r3, #1
 8004bb4:	2300      	movls	r3, #0
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	461a      	mov	r2, r3
 8004bba:	f107 0314 	add.w	r3, r7, #20
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fe fb93 	bl	80032ec <inc_lock>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d102      	bne.n	8004bda <f_open+0x226>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8004bda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f040 8095 	bne.w	8004d0e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004be8:	4611      	mov	r1, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff f9b4 	bl	8003f58 <ld_clust>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf8:	331c      	adds	r3, #28
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fe fa10 	bl	8003020 <ld_dword>
 8004c00:	4602      	mov	r2, r0
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	88da      	ldrh	r2, [r3, #6]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	79fa      	ldrb	r2, [r7, #7]
 8004c1e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3330      	adds	r3, #48	@ 0x30
 8004c36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fe fa7a 	bl	8003136 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004c42:	79fb      	ldrb	r3, [r7, #7]
 8004c44:	f003 0320 	and.w	r3, r3, #32
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d060      	beq.n	8004d0e <f_open+0x35a>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d05c      	beq.n	8004d0e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	895b      	ldrh	r3, [r3, #10]
 8004c60:	025b      	lsls	r3, r3, #9
 8004c62:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c70:	e016      	b.n	8004ca0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fe fd25 	bl	80036c6 <get_fat>
 8004c7c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8004c7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d802      	bhi.n	8004c8a <f_open+0x2d6>
 8004c84:	2302      	movs	r3, #2
 8004c86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004c8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d102      	bne.n	8004c98 <f_open+0x2e4>
 8004c92:	2301      	movs	r3, #1
 8004c94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004c98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ca0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d103      	bne.n	8004cb0 <f_open+0x2fc>
 8004ca8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d8e0      	bhi.n	8004c72 <f_open+0x2be>
				}
				fp->clust = clst;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004cb4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004cb6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d127      	bne.n	8004d0e <f_open+0x35a>
 8004cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d022      	beq.n	8004d0e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fe fcdb 	bl	8003688 <clust2sect>
 8004cd2:	6478      	str	r0, [r7, #68]	@ 0x44
 8004cd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d103      	bne.n	8004ce2 <f_open+0x32e>
						res = FR_INT_ERR;
 8004cda:	2302      	movs	r3, #2
 8004cdc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004ce0:	e015      	b.n	8004d0e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ce4:	0a5a      	lsrs	r2, r3, #9
 8004ce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ce8:	441a      	add	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	7858      	ldrb	r0, [r3, #1]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6a1a      	ldr	r2, [r3, #32]
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	f7fe f919 	bl	8002f34 <disk_read>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <f_open+0x35a>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004d0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <f_open+0x368>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8004d1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3760      	adds	r7, #96	@ 0x60
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08c      	sub	sp, #48	@ 0x30
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f107 0210 	add.w	r2, r7, #16
 8004d46:	4611      	mov	r1, r2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff fdb7 	bl	80048bc <validate>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004d54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d107      	bne.n	8004d6c <f_write+0x44>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	7d5b      	ldrb	r3, [r3, #21]
 8004d60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004d64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <f_write+0x4a>
 8004d6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004d70:	e14b      	b.n	800500a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	7d1b      	ldrb	r3, [r3, #20]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <f_write+0x5a>
 8004d7e:	2307      	movs	r3, #7
 8004d80:	e143      	b.n	800500a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	441a      	add	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	f080 812d 	bcs.w	8004fee <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8004d9c:	e127      	b.n	8004fee <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f040 80e3 	bne.w	8004f72 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	0a5b      	lsrs	r3, r3, #9
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	8952      	ldrh	r2, [r2, #10]
 8004db6:	3a01      	subs	r2, #1
 8004db8:	4013      	ands	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d143      	bne.n	8004e4a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10c      	bne.n	8004de4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8004dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d11a      	bne.n	8004e0c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2100      	movs	r1, #0
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fe fe69 	bl	8003ab2 <create_chain>
 8004de0:	62b8      	str	r0, [r7, #40]	@ 0x28
 8004de2:	e013      	b.n	8004e0c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d007      	beq.n	8004dfc <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	4619      	mov	r1, r3
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f7fe fef5 	bl	8003be2 <clmt_clust>
 8004df8:	62b8      	str	r0, [r7, #40]	@ 0x28
 8004dfa:	e007      	b.n	8004e0c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	4619      	mov	r1, r3
 8004e04:	4610      	mov	r0, r2
 8004e06:	f7fe fe54 	bl	8003ab2 <create_chain>
 8004e0a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 80f2 	beq.w	8004ff8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d104      	bne.n	8004e24 <f_write+0xfc>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	755a      	strb	r2, [r3, #21]
 8004e20:	2302      	movs	r3, #2
 8004e22:	e0f2      	b.n	800500a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2a:	d104      	bne.n	8004e36 <f_write+0x10e>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	755a      	strb	r2, [r3, #21]
 8004e32:	2301      	movs	r3, #1
 8004e34:	e0e9      	b.n	800500a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e3a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d102      	bne.n	8004e4a <f_write+0x122>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e48:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	7d1b      	ldrb	r3, [r3, #20]
 8004e4e:	b25b      	sxtb	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	da18      	bge.n	8004e86 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	7858      	ldrb	r0, [r3, #1]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a1a      	ldr	r2, [r3, #32]
 8004e62:	2301      	movs	r3, #1
 8004e64:	f7fe f886 	bl	8002f74 <disk_write>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d004      	beq.n	8004e78 <f_write+0x150>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2201      	movs	r2, #1
 8004e72:	755a      	strb	r2, [r3, #21]
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0c8      	b.n	800500a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	7d1b      	ldrb	r3, [r3, #20]
 8004e7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4610      	mov	r0, r2
 8004e90:	f7fe fbfa 	bl	8003688 <clust2sect>
 8004e94:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d104      	bne.n	8004ea6 <f_write+0x17e>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	755a      	strb	r2, [r3, #21]
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e0b1      	b.n	800500a <f_write+0x2e2>
			sect += csect;
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	4413      	add	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	0a5b      	lsrs	r3, r3, #9
 8004eb2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d03c      	beq.n	8004f34 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	8952      	ldrh	r2, [r2, #10]
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d905      	bls.n	8004ed4 <f_write+0x1ac>
					cc = fs->csize - csect;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	895b      	ldrh	r3, [r3, #10]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	7858      	ldrb	r0, [r3, #1]
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	69f9      	ldr	r1, [r7, #28]
 8004ede:	f7fe f849 	bl	8002f74 <disk_write>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d004      	beq.n	8004ef2 <f_write+0x1ca>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2201      	movs	r2, #1
 8004eec:	755a      	strb	r2, [r3, #21]
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e08b      	b.n	800500a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a1a      	ldr	r2, [r3, #32]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	6a3a      	ldr	r2, [r7, #32]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d915      	bls.n	8004f2c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a1a      	ldr	r2, [r3, #32]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	025b      	lsls	r3, r3, #9
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	4413      	add	r3, r2
 8004f14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f18:	4619      	mov	r1, r3
 8004f1a:	f7fe f8eb 	bl	80030f4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	7d1b      	ldrb	r3, [r3, #20]
 8004f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	025b      	lsls	r3, r3, #9
 8004f30:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8004f32:	e03f      	b.n	8004fb4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d016      	beq.n	8004f6c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	699a      	ldr	r2, [r3, #24]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d210      	bcs.n	8004f6c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	7858      	ldrb	r0, [r3, #1]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004f54:	2301      	movs	r3, #1
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	f7fd ffec 	bl	8002f34 <disk_read>
 8004f5c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d004      	beq.n	8004f6c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2201      	movs	r2, #1
 8004f66:	755a      	strb	r2, [r3, #21]
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e04e      	b.n	800500a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f7a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8004f7e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8004f80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d901      	bls.n	8004f8c <f_write+0x264>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f9a:	4413      	add	r3, r2
 8004f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f9e:	69f9      	ldr	r1, [r7, #28]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fe f8a7 	bl	80030f4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	7d1b      	ldrb	r3, [r3, #20]
 8004faa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	4413      	add	r3, r2
 8004fba:	61fb      	str	r3, [r7, #28]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	699a      	ldr	r2, [r3, #24]
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc2:	441a      	add	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	619a      	str	r2, [r3, #24]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	bf38      	it	cc
 8004fd4:	461a      	movcc	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	60da      	str	r2, [r3, #12]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe0:	441a      	add	r2, r3
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f47f aed4 	bne.w	8004d9e <f_write+0x76>
 8004ff6:	e000      	b.n	8004ffa <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004ff8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	7d1b      	ldrb	r3, [r3, #20]
 8004ffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005002:	b2da      	uxtb	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3730      	adds	r7, #48	@ 0x30
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b086      	sub	sp, #24
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f107 0208 	add.w	r2, r7, #8
 8005020:	4611      	mov	r1, r2
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff fc4a 	bl	80048bc <validate>
 8005028:	4603      	mov	r3, r0
 800502a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800502c:	7dfb      	ldrb	r3, [r7, #23]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d168      	bne.n	8005104 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	7d1b      	ldrb	r3, [r3, #20]
 8005036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d062      	beq.n	8005104 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	7d1b      	ldrb	r3, [r3, #20]
 8005042:	b25b      	sxtb	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	da15      	bge.n	8005074 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	7858      	ldrb	r0, [r3, #1]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1a      	ldr	r2, [r3, #32]
 8005056:	2301      	movs	r3, #1
 8005058:	f7fd ff8c 	bl	8002f74 <disk_write>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <f_sync+0x54>
 8005062:	2301      	movs	r3, #1
 8005064:	e04f      	b.n	8005106 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	7d1b      	ldrb	r3, [r3, #20]
 800506a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800506e:	b2da      	uxtb	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005074:	f7fd f9e4 	bl	8002440 <get_fattime>
 8005078:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005080:	4619      	mov	r1, r3
 8005082:	4610      	mov	r0, r2
 8005084:	f7fe fa64 	bl	8003550 <move_window>
 8005088:	4603      	mov	r3, r0
 800508a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800508c:	7dfb      	ldrb	r3, [r7, #23]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d138      	bne.n	8005104 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005096:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	330b      	adds	r3, #11
 800509c:	781a      	ldrb	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	330b      	adds	r3, #11
 80050a2:	f042 0220 	orr.w	r2, r2, #32
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6818      	ldr	r0, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	461a      	mov	r2, r3
 80050b4:	68f9      	ldr	r1, [r7, #12]
 80050b6:	f7fe ff6e 	bl	8003f96 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f103 021c 	add.w	r2, r3, #28
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4619      	mov	r1, r3
 80050c6:	4610      	mov	r0, r2
 80050c8:	f7fd ffe8 	bl	800309c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	3316      	adds	r3, #22
 80050d0:	6939      	ldr	r1, [r7, #16]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fd ffe2 	bl	800309c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3312      	adds	r3, #18
 80050dc:	2100      	movs	r1, #0
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fd ffc1 	bl	8003066 <st_word>
					fs->wflag = 1;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2201      	movs	r2, #1
 80050e8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fe fa5d 	bl	80035ac <sync_fs>
 80050f2:	4603      	mov	r3, r0
 80050f4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	7d1b      	ldrb	r3, [r3, #20]
 80050fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005104:	7dfb      	ldrb	r3, [r7, #23]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7ff ff7b 	bl	8005012 <f_sync>
 800511c:	4603      	mov	r3, r0
 800511e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d118      	bne.n	8005158 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f107 0208 	add.w	r2, r7, #8
 800512c:	4611      	mov	r1, r2
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff fbc4 	bl	80048bc <validate>
 8005134:	4603      	mov	r3, r0
 8005136:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10c      	bne.n	8005158 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	4618      	mov	r0, r3
 8005144:	f7fe f960 	bl	8003408 <dec_lock>
 8005148:	4603      	mov	r3, r0
 800514a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d102      	bne.n	8005158 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005158:	7bfb      	ldrb	r3, [r7, #15]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b096      	sub	sp, #88	@ 0x58
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800516a:	f107 0108 	add.w	r1, r7, #8
 800516e:	1d3b      	adds	r3, r7, #4
 8005170:	2202      	movs	r2, #2
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff f956 	bl	8004424 <find_volume>
 8005178:	4603      	mov	r3, r0
 800517a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8005182:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005186:	2b00      	cmp	r3, #0
 8005188:	f040 80ec 	bne.w	8005364 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	f107 030c 	add.w	r3, r7, #12
 8005192:	4611      	mov	r1, r2
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff f839 	bl	800420c <follow_path>
 800519a:	4603      	mov	r3, r0
 800519c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80051a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d102      	bne.n	80051ae <f_mkdir+0x4c>
 80051a8:	2308      	movs	r3, #8
 80051aa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80051ae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	f040 80d6 	bne.w	8005364 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80051b8:	f107 030c 	add.w	r3, r7, #12
 80051bc:	2100      	movs	r1, #0
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fe fc77 	bl	8003ab2 <create_chain>
 80051c4:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	895b      	ldrh	r3, [r3, #10]
 80051ca:	025b      	lsls	r3, r3, #9
 80051cc:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80051d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d102      	bne.n	80051e0 <f_mkdir+0x7e>
 80051da:	2307      	movs	r3, #7
 80051dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80051e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d102      	bne.n	80051ec <f_mkdir+0x8a>
 80051e6:	2302      	movs	r3, #2
 80051e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80051ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f2:	d102      	bne.n	80051fa <f_mkdir+0x98>
 80051f4:	2301      	movs	r3, #1
 80051f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80051fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <f_mkdir+0xae>
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4618      	mov	r0, r3
 8005206:	f7fe f95f 	bl	80034c8 <sync_window>
 800520a:	4603      	mov	r3, r0
 800520c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 8005210:	f7fd f916 	bl	8002440 <get_fattime>
 8005214:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8005216:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800521a:	2b00      	cmp	r3, #0
 800521c:	d16a      	bne.n	80052f4 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005222:	4618      	mov	r0, r3
 8005224:	f7fe fa30 	bl	8003688 <clust2sect>
 8005228:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	3330      	adds	r3, #48	@ 0x30
 800522e:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 8005230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005234:	2100      	movs	r1, #0
 8005236:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005238:	f7fd ff7d 	bl	8003136 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800523c:	220b      	movs	r2, #11
 800523e:	2120      	movs	r1, #32
 8005240:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005242:	f7fd ff78 	bl	8003136 <mem_set>
					dir[DIR_Name] = '.';
 8005246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005248:	222e      	movs	r2, #46	@ 0x2e
 800524a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800524c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800524e:	330b      	adds	r3, #11
 8005250:	2210      	movs	r2, #16
 8005252:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8005254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005256:	3316      	adds	r3, #22
 8005258:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800525a:	4618      	mov	r0, r3
 800525c:	f7fd ff1e 	bl	800309c <st_dword>
					st_clust(fs, dir, dcl);
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005264:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005266:	4618      	mov	r0, r3
 8005268:	f7fe fe95 	bl	8003f96 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800526c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800526e:	3320      	adds	r3, #32
 8005270:	2220      	movs	r2, #32
 8005272:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005274:	4618      	mov	r0, r3
 8005276:	f7fd ff3d 	bl	80030f4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800527a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800527c:	3321      	adds	r3, #33	@ 0x21
 800527e:	222e      	movs	r2, #46	@ 0x2e
 8005280:	701a      	strb	r2, [r3, #0]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	2b03      	cmp	r3, #3
 800528c:	d106      	bne.n	800529c <f_mkdir+0x13a>
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005292:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005294:	429a      	cmp	r2, r3
 8005296:	d101      	bne.n	800529c <f_mkdir+0x13a>
 8005298:	2300      	movs	r3, #0
 800529a:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800529c:	68b8      	ldr	r0, [r7, #8]
 800529e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052a0:	3320      	adds	r3, #32
 80052a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052a4:	4619      	mov	r1, r3
 80052a6:	f7fe fe76 	bl	8003f96 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	895b      	ldrh	r3, [r3, #10]
 80052ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80052b0:	e01b      	b.n	80052ea <f_mkdir+0x188>
					fs->winsect = dsc++;
 80052b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
					fs->wflag = 1;
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2201      	movs	r2, #1
 80052c0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fe f8ff 	bl	80034c8 <sync_window>
 80052ca:	4603      	mov	r3, r0
 80052cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 80052d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10c      	bne.n	80052f2 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 80052d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052dc:	2100      	movs	r1, #0
 80052de:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80052e0:	f7fd ff29 	bl	8003136 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80052e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052e6:	3b01      	subs	r3, #1
 80052e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80052ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1e0      	bne.n	80052b2 <f_mkdir+0x150>
 80052f0:	e000      	b.n	80052f4 <f_mkdir+0x192>
					if (res != FR_OK) break;
 80052f2:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80052f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d107      	bne.n	800530c <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80052fc:	f107 030c 	add.w	r3, r7, #12
 8005300:	4618      	mov	r0, r3
 8005302:	f7fe febd 	bl	8004080 <dir_register>
 8005306:	4603      	mov	r3, r0
 8005308:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 800530c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005310:	2b00      	cmp	r3, #0
 8005312:	d120      	bne.n	8005356 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8005314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005316:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8005318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800531a:	3316      	adds	r3, #22
 800531c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800531e:	4618      	mov	r0, r3
 8005320:	f7fd febc 	bl	800309c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005328:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800532a:	4618      	mov	r0, r3
 800532c:	f7fe fe33 	bl	8003f96 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8005330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005332:	330b      	adds	r3, #11
 8005334:	2210      	movs	r2, #16
 8005336:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2201      	movs	r2, #1
 800533c:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800533e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10e      	bne.n	8005364 <f_mkdir+0x202>
					res = sync_fs(fs);
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	4618      	mov	r0, r3
 800534a:	f7fe f92f 	bl	80035ac <sync_fs>
 800534e:	4603      	mov	r3, r0
 8005350:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8005354:	e006      	b.n	8005364 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8005356:	f107 030c 	add.w	r3, r7, #12
 800535a:	2200      	movs	r2, #0
 800535c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800535e:	4618      	mov	r0, r3
 8005360:	f7fe fb42 	bl	80039e8 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8005364:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8005368:	4618      	mov	r0, r3
 800536a:	3758      	adds	r7, #88	@ 0x58
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	4613      	mov	r3, r2
 800537c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800537e:	2301      	movs	r3, #1
 8005380:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005386:	4b1f      	ldr	r3, [pc, #124]	@ (8005404 <FATFS_LinkDriverEx+0x94>)
 8005388:	7a5b      	ldrb	r3, [r3, #9]
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d131      	bne.n	80053f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005390:	4b1c      	ldr	r3, [pc, #112]	@ (8005404 <FATFS_LinkDriverEx+0x94>)
 8005392:	7a5b      	ldrb	r3, [r3, #9]
 8005394:	b2db      	uxtb	r3, r3
 8005396:	461a      	mov	r2, r3
 8005398:	4b1a      	ldr	r3, [pc, #104]	@ (8005404 <FATFS_LinkDriverEx+0x94>)
 800539a:	2100      	movs	r1, #0
 800539c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800539e:	4b19      	ldr	r3, [pc, #100]	@ (8005404 <FATFS_LinkDriverEx+0x94>)
 80053a0:	7a5b      	ldrb	r3, [r3, #9]
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	4a17      	ldr	r2, [pc, #92]	@ (8005404 <FATFS_LinkDriverEx+0x94>)
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80053ae:	4b15      	ldr	r3, [pc, #84]	@ (8005404 <FATFS_LinkDriverEx+0x94>)
 80053b0:	7a5b      	ldrb	r3, [r3, #9]
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	461a      	mov	r2, r3
 80053b6:	4b13      	ldr	r3, [pc, #76]	@ (8005404 <FATFS_LinkDriverEx+0x94>)
 80053b8:	4413      	add	r3, r2
 80053ba:	79fa      	ldrb	r2, [r7, #7]
 80053bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80053be:	4b11      	ldr	r3, [pc, #68]	@ (8005404 <FATFS_LinkDriverEx+0x94>)
 80053c0:	7a5b      	ldrb	r3, [r3, #9]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	b2d1      	uxtb	r1, r2
 80053c8:	4a0e      	ldr	r2, [pc, #56]	@ (8005404 <FATFS_LinkDriverEx+0x94>)
 80053ca:	7251      	strb	r1, [r2, #9]
 80053cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80053ce:	7dbb      	ldrb	r3, [r7, #22]
 80053d0:	3330      	adds	r3, #48	@ 0x30
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	3301      	adds	r3, #1
 80053dc:	223a      	movs	r2, #58	@ 0x3a
 80053de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	3302      	adds	r3, #2
 80053e4:	222f      	movs	r2, #47	@ 0x2f
 80053e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	3303      	adds	r3, #3
 80053ec:	2200      	movs	r2, #0
 80053ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80053f0:	2300      	movs	r3, #0
 80053f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80053f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	200000d8 	.word	0x200000d8

08005408 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005412:	2200      	movs	r2, #0
 8005414:	6839      	ldr	r1, [r7, #0]
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff ffaa 	bl	8005370 <FATFS_LinkDriverEx>
 800541c:	4603      	mov	r3, r0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <memset>:
 8005426:	4402      	add	r2, r0
 8005428:	4603      	mov	r3, r0
 800542a:	4293      	cmp	r3, r2
 800542c:	d100      	bne.n	8005430 <memset+0xa>
 800542e:	4770      	bx	lr
 8005430:	f803 1b01 	strb.w	r1, [r3], #1
 8005434:	e7f9      	b.n	800542a <memset+0x4>
	...

08005438 <__libc_init_array>:
 8005438:	b570      	push	{r4, r5, r6, lr}
 800543a:	4d0d      	ldr	r5, [pc, #52]	@ (8005470 <__libc_init_array+0x38>)
 800543c:	4c0d      	ldr	r4, [pc, #52]	@ (8005474 <__libc_init_array+0x3c>)
 800543e:	1b64      	subs	r4, r4, r5
 8005440:	10a4      	asrs	r4, r4, #2
 8005442:	2600      	movs	r6, #0
 8005444:	42a6      	cmp	r6, r4
 8005446:	d109      	bne.n	800545c <__libc_init_array+0x24>
 8005448:	4d0b      	ldr	r5, [pc, #44]	@ (8005478 <__libc_init_array+0x40>)
 800544a:	4c0c      	ldr	r4, [pc, #48]	@ (800547c <__libc_init_array+0x44>)
 800544c:	f000 f818 	bl	8005480 <_init>
 8005450:	1b64      	subs	r4, r4, r5
 8005452:	10a4      	asrs	r4, r4, #2
 8005454:	2600      	movs	r6, #0
 8005456:	42a6      	cmp	r6, r4
 8005458:	d105      	bne.n	8005466 <__libc_init_array+0x2e>
 800545a:	bd70      	pop	{r4, r5, r6, pc}
 800545c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005460:	4798      	blx	r3
 8005462:	3601      	adds	r6, #1
 8005464:	e7ee      	b.n	8005444 <__libc_init_array+0xc>
 8005466:	f855 3b04 	ldr.w	r3, [r5], #4
 800546a:	4798      	blx	r3
 800546c:	3601      	adds	r6, #1
 800546e:	e7f2      	b.n	8005456 <__libc_init_array+0x1e>
 8005470:	080055f8 	.word	0x080055f8
 8005474:	080055f8 	.word	0x080055f8
 8005478:	080055f8 	.word	0x080055f8
 800547c:	080055fc 	.word	0x080055fc

08005480 <_init>:
 8005480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005482:	bf00      	nop
 8005484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005486:	bc08      	pop	{r3}
 8005488:	469e      	mov	lr, r3
 800548a:	4770      	bx	lr

0800548c <_fini>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	bf00      	nop
 8005490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005492:	bc08      	pop	{r3}
 8005494:	469e      	mov	lr, r3
 8005496:	4770      	bx	lr
